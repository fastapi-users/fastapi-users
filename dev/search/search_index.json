{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI Users","text":"<p> Ready-to-use and customizable users management for FastAPI  </p> <p> </p> <p></p> <p> </p> <p>Documentation: https://fastapi-users.github.io/fastapi-users/</p> <p>Source Code: https://github.com/fastapi-users/fastapi-users</p> <p>Add quickly a registration and authentication system to your FastAPI project. FastAPI Users is designed to be as customizable and adaptable as possible.</p>"},{"location":"#features","title":"Features","text":"<ul> <li> Extensible base user model</li> <li> Ready-to-use register, login, reset password and verify e-mail routes</li> <li> Ready-to-use social OAuth2 login flow</li> <li> Dependency callables to inject current user in route</li> <li> Pluggable password validation</li> <li> Customizable database backend<ul> <li> SQLAlchemy ORM async included</li> <li> MongoDB with Beanie ODM included</li> </ul> </li> <li> Multiple customizable authentication backends<ul> <li> Transports: Authorization header, Cookie</li> <li> Strategies: JWT, Database, Redis</li> </ul> </li> <li> Full OpenAPI schema support, even with several authentication backends</li> </ul>"},{"location":"#in-a-hurry-discover-fief-the-open-source-authentication-platform","title":"In a hurry? Discover Fief, the open-source authentication platform","text":"<p>Implementing registration, login, social auth is hard and painful. We know it. With our highly secure and open-source users management platform, you can focus on your app while staying in control of your users data.</p> <ul> <li>Open-source: self-host it for free</li> <li>Pre-built login and registration pages: clean and fast authentication so you don't have to do it yourself</li> <li>Official Python client with built-in FastAPI integration</li> </ul> <p></p> <p> </p> <p>It's free and open-source</p>"},{"location":"#contributors-and-sponsors","title":"Contributors and sponsors \u2728\u2615\ufe0f","text":"<p>Thanks goes to these wonderful people (emoji key):</p> <sub>Fran\u00e7ois Voron</sub>\ud83d\udea7 <sub>Paolo Dina</sub>\ud83d\udcb5 \ud83d\udcbb <sub>Dmytro Ohorodnik</sub>\ud83d\udc1b <sub>Matthew D. Scholefield</sub>\ud83d\udc1b \ud83d\udcbb <sub>roywes</sub>\ud83d\udc1b \ud83d\udcbb <sub>Satwik Kansal</sub>\ud83d\udcd6 <sub>Edd Salkield</sub>\ud83d\udcbb \ud83d\udcd6 <sub>mark-todd</sub>\ud83d\udcbb \ud83d\udcd6 <sub>lill74</sub>\ud83d\udc1b \ud83d\udcbb \ud83d\udcd6 <sub>SelfhostedPro</sub>\ud83d\udee1\ufe0f \ud83d\udcbb <sub>Oskar Gmerek</sub>\ud83d\udcd6 <sub>Martin Collado</sub>\ud83d\udc1b \ud83d\udcbb <sub>Eric Lopes</sub>\ud83d\udcd6 \ud83d\udee1\ufe0f <sub>Beau Breon</sub>\ud83d\udcbb <sub>Niyas Mohammed</sub>\ud83d\udcd6 <sub>prostomarkeloff</sub>\ud83d\udcd6 \ud83d\udcbb <sub>Marius M\u00e9zerette</sub>\ud83d\udc1b \ud83e\udd14 <sub>Nickolas Grigoriadis</sub>\ud83d\udc1b <sub>Open Data Coder</sub>\ud83e\udd14 <sub>Mohammed Alshehri</sub>\ud83e\udd14 <sub>Tyler Renelle</sub>\ud83e\udd14 <sub>collerek</sub>\ud83d\udcbb <sub>Robert Bracco</sub>\ud83d\udcb5 <sub>Augusto Herrmann</sub>\ud83d\udcd6 <sub>Smithybrewer</sub>\ud83d\udc1b <sub>silllli</sub>\ud83d\udcd6 <sub>alexferrari88</sub>\ud83d\udcb5 <sub>sandalwoodbox</sub>\ud83d\udc1b \ud83d\udcd6 <sub>Vlad Hoi</sub>\ud83d\udcd6 <sub>Joe Nudell</sub>\ud83d\udc1b <sub>Ben</sub>\ud83d\udcbb <sub>BoYanZh</sub>\ud83d\udcd6 <sub>David Brochart</sub>\ud83d\udcd6 \ud83d\udcbb <sub>Daan Beverdam</sub>\ud83d\udcbb <sub>St\u00e9phane Raimbault</sub>\u26a0\ufe0f \ud83d\udc1b <sub>Sondre Lilleb\u00f8 Gundersen</sub>\ud83d\udcd6 <sub>Maxim</sub>\ud83d\udcd6 \ud83d\udc1b <sub>scottdavort</sub>\ud83d\udcb5 <sub>John Dukewich</sub>\ud83d\udcd6 <sub>Yasser Tahiri</sub>\ud83d\udcbb <sub>Brandon H. Goding</sub>\ud83d\udcbb \ud83d\udcd6 <sub>PovilasK</sub>\ud83d\udcbb <sub>Just van den Broecke</sub>\ud83d\udcb5 <sub>jakemanger</sub>\ud83d\udc1b \ud83d\udcbb <sub>Ikko Ashimine</sub>\ud83d\udcbb <sub>Maty\u00e1\u0161 Richter</sub>\ud83d\udcbb <sub>Hazedd</sub>\ud83d\udc1b \ud83d\udcd6 <sub>Luis Roel</sub>\ud83d\udcb5 <sub>Alexandr Makurin</sub>\ud83d\udcbb \ud83d\udc1b <sub>Leon Thurner</sub>\ud83d\udcd6 <sub>Goran Meki\u0107</sub>\ud83d\udce6 <sub>Gaganpreet</sub>\ud83d\udcbb <sub>Joe Taylor</sub>\ud83d\udcbb <sub>Richard Friberg</sub>\ud83d\udc1b <sub>Kenton Parton</sub>\ud83d\udcb5 <sub>Adrian Cio\u0142ek</sub>\ud83d\udc1b <sub>\u2b55Alexander Rymdeko-Harvey</sub>\ud83d\udcd6 <sub>schwannden</sub>\ud83d\udea7 \ud83d\udcbb <sub>Jimmy Angel P\u00e9rez D\u00edaz</sub>\ud83d\udee1\ufe0f <sub>Austin Orr</sub>\ud83d\udea7 <sub>Carlo Eugster</sub>\ud83d\udee1\ufe0f <sub>Vittorio Zamboni</sub>\ud83d\udcbb <sub>Andrey</sub>\ud83d\udcd6 <sub>Can H. Tartanoglu</sub>\ud83d\udc1b <sub>Filipe Nascimento</sub>\ud83d\udee1\ufe0f <sub>dudulu</sub>\ud83d\udcb5 \ud83d\udc1b \ud83d\udcac <sub>Toni Alatalo</sub>\ud83d\udcbb \ud83d\udcd6 <sub>B\u00f6rge Kiss</sub>\ud83d\udcd6 <sub>Guilherme Caminha</sub>\ud83d\udcd6 <sub>T\u00e9va KRIEF</sub>\ud83d\udcbb <sub>Essa Alshammri</sub>\ud83d\udcd6 <sub>0xJan</sub>\ud83d\udc1b <sub>Justin Thomas</sub>\ud83d\udcbb <sub>Adam Israel</sub>\ud83d\udcbb <sub>Nerixjk</sub>\ud83d\udc1b \ud83d\udcbb <sub>Mike Fotinakis</sub>\ud83d\udcbb \ud83d\udc1b <sub>lifengmds</sub>\ud83d\udcb5 <sub>raindata5</sub>\ud83d\udcd6 <sub>Mark Donnelly</sub>\ud83d\udcd6 <sub>Alexander Zinov</sub>\ud83d\udcbb <sub>nimaxin</sub>\ud83d\udcd6 <p>This project follows the all-contributors specification. Contributions of any kind welcome!</p>"},{"location":"#development","title":"Development","text":""},{"location":"#setup-environment","title":"Setup environment","text":"<p>We use Hatch to manage the development environment and production build. Ensure it's installed on your system.</p>"},{"location":"#run-unit-tests","title":"Run unit tests","text":"<p>You can run all the tests with:</p> <pre><code>hatch run test:test\n</code></pre>"},{"location":"#format-the-code","title":"Format the code","text":"<p>Execute the following command to apply linting and check typing:</p> <pre><code>hatch run lint\n</code></pre>"},{"location":"#serve-the-documentation","title":"Serve the documentation","text":"<p>You can serve the documentation locally with the following command:</p> <pre><code>hatch run docs\n</code></pre> <p>The documentation will be available on http://localhost:8000.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"installation/","title":"Installation","text":"<p>You can add FastAPI Users to your FastAPI project in a few easy steps. First of all, install the dependency:</p>"},{"location":"installation/#with-sqlalchemy-support","title":"With SQLAlchemy support","text":"<pre><code>pip install 'fastapi-users[sqlalchemy]'\n</code></pre>"},{"location":"installation/#with-beanie-support","title":"With Beanie support","text":"<pre><code>pip install 'fastapi-users[beanie]'\n</code></pre>"},{"location":"installation/#with-redis-authentication-backend-support","title":"With Redis authentication backend support","text":"<p>Information on installing with proper database support can be found in the Redis section.</p>"},{"location":"installation/#with-oauth2-support","title":"With OAuth2 support","text":"<p>Information on installing with proper database support can be found in the OAuth2 section.</p> <p>That's it! In the next section, we'll have an overview of how things work.</p>"},{"location":"configuration/full-example/","title":"Full example","text":"<p>Here is a full working example with JWT authentication to help get you started.</p> <p>Warning</p> <p>Notice that SECRET should be changed to a strong passphrase. Insecure passwords may give attackers full access to your database.</p>"},{"location":"configuration/full-example/#sqlalchemy","title":"SQLAlchemy","text":"<p>Open </p> requirements.txtmain.pyapp/app.pyapp/db.pyapp/schemas.pyapp/users.py <pre><code>fastapi\nfastapi-users[sqlalchemy]\nuvicorn[standard]\naiosqlite\n</code></pre> <pre><code>import uvicorn\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"app.app:app\", host=\"0.0.0.0\", log_level=\"info\")\n</code></pre> <pre><code>from contextlib import asynccontextmanager\n\nfrom fastapi import Depends, FastAPI\n\nfrom app.db import User, create_db_and_tables\nfrom app.schemas import UserCreate, UserRead, UserUpdate\nfrom app.users import auth_backend, current_active_user, fastapi_users\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Not needed if you setup a migration system like Alembic\n    await create_db_and_tables()\n    yield\n\n\napp = FastAPI(lifespan=lifespan)\n\napp.include_router(\n    fastapi_users.get_auth_router(auth_backend), prefix=\"/auth/jwt\", tags=[\"auth\"]\n)\napp.include_router(\n    fastapi_users.get_register_router(UserRead, UserCreate),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_reset_password_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_verify_router(UserRead),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_users_router(UserRead, UserUpdate),\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n\n\n@app.get(\"/authenticated-route\")\nasync def authenticated_route(user: User = Depends(current_active_user)):\n    return {\"message\": f\"Hello {user.email}!\"}\n</code></pre> <pre><code>from collections.abc import AsyncGenerator\n\nfrom fastapi import Depends\nfrom fastapi_users.db import SQLAlchemyBaseUserTableUUID, SQLAlchemyUserDatabase\nfrom sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine\nfrom sqlalchemy.orm import DeclarativeBase\n\nDATABASE_URL = \"sqlite+aiosqlite:///./test.db\"\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(SQLAlchemyBaseUserTableUUID, Base):\n    pass\n\n\nengine = create_async_engine(DATABASE_URL)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\n\n\nasync def create_db_and_tables():\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n\nasync def get_async_session() -&gt; AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session\n\n\nasync def get_user_db(session: AsyncSession = Depends(get_async_session)):\n    yield SQLAlchemyUserDatabase(session, User)\n</code></pre> <pre><code>import uuid\n\nfrom fastapi_users import schemas\n\n\nclass UserRead(schemas.BaseUser[uuid.UUID]):\n    pass\n\n\nclass UserCreate(schemas.BaseUserCreate):\n    pass\n\n\nclass UserUpdate(schemas.BaseUserUpdate):\n    pass\n</code></pre> <pre><code>import uuid\nfrom typing import Optional\n\nfrom fastapi import Depends, Request\nfrom fastapi_users import BaseUserManager, FastAPIUsers, UUIDIDMixin, models\nfrom fastapi_users.authentication import (\n    AuthenticationBackend,\n    BearerTransport,\n    JWTStrategy,\n)\nfrom fastapi_users.db import SQLAlchemyUserDatabase\n\nfrom app.db import User, get_user_db\n\nSECRET = \"SECRET\"\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    reset_password_token_secret = SECRET\n    verification_token_secret = SECRET\n\n    async def on_after_register(self, user: User, request: Optional[Request] = None):\n        print(f\"User {user.id} has registered.\")\n\n    async def on_after_forgot_password(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n\n    async def on_after_request_verify(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"Verification requested for user {user.id}. Verification token: {token}\")\n\n\nasync def get_user_manager(user_db: SQLAlchemyUserDatabase = Depends(get_user_db)):\n    yield UserManager(user_db)\n\n\nbearer_transport = BearerTransport(tokenUrl=\"auth/jwt/login\")\n\n\ndef get_jwt_strategy() -&gt; JWTStrategy[models.UP, models.ID]:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n\n\nauth_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=bearer_transport,\n    get_strategy=get_jwt_strategy,\n)\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](get_user_manager, [auth_backend])\n\ncurrent_active_user = fastapi_users.current_user(active=True)\n</code></pre>"},{"location":"configuration/full-example/#beanie","title":"Beanie","text":"<p>Open </p> requirements.txtmain.pyapp/app.pyapp/db.pyapp/schemas.pyapp/users.py <pre><code>fastapi\nfastapi-users[beanie]\nuvicorn[standard]\n</code></pre> <pre><code>import uvicorn\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"app.app:app\", host=\"0.0.0.0\", log_level=\"info\")\n</code></pre> <pre><code>from contextlib import asynccontextmanager\n\nfrom beanie import init_beanie\nfrom fastapi import Depends, FastAPI\n\nfrom app.db import User, db\nfrom app.schemas import UserCreate, UserRead, UserUpdate\nfrom app.users import auth_backend, current_active_user, fastapi_users\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await init_beanie(\n        database=db,\n        document_models=[\n            User,\n        ],\n    )\n    yield\n\n\napp = FastAPI(lifespan=lifespan)\n\n\napp.include_router(\n    fastapi_users.get_auth_router(auth_backend), prefix=\"/auth/jwt\", tags=[\"auth\"]\n)\napp.include_router(\n    fastapi_users.get_register_router(UserRead, UserCreate),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_reset_password_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_verify_router(UserRead),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_users_router(UserRead, UserUpdate),\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n\n\n@app.get(\"/authenticated-route\")\nasync def authenticated_route(user: User = Depends(current_active_user)):\n    return {\"message\": f\"Hello {user.email}!\"}\n</code></pre> <pre><code>import motor.motor_asyncio\nfrom beanie import Document\nfrom fastapi_users.db import BeanieBaseUser\nfrom fastapi_users_db_beanie import BeanieUserDatabase\n\nDATABASE_URL = \"mongodb://localhost:27017\"\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\ndb = client[\"database_name\"]\n\n\nclass User(BeanieBaseUser, Document):\n    pass\n\n\nasync def get_user_db():\n    yield BeanieUserDatabase(User)\n</code></pre> <pre><code>from beanie import PydanticObjectId\nfrom fastapi_users import schemas\n\n\nclass UserRead(schemas.BaseUser[PydanticObjectId]):\n    pass\n\n\nclass UserCreate(schemas.BaseUserCreate):\n    pass\n\n\nclass UserUpdate(schemas.BaseUserUpdate):\n    pass\n</code></pre> <pre><code>from typing import Optional\n\nfrom beanie import PydanticObjectId\nfrom fastapi import Depends, Request\nfrom fastapi_users import BaseUserManager, FastAPIUsers\nfrom fastapi_users.authentication import (\n    AuthenticationBackend,\n    BearerTransport,\n    JWTStrategy,\n)\nfrom fastapi_users.db import BeanieUserDatabase, ObjectIDIDMixin\n\nfrom app.db import User, get_user_db\n\nSECRET = \"SECRET\"\n\n\nclass UserManager(ObjectIDIDMixin, BaseUserManager[User, PydanticObjectId]):\n    reset_password_token_secret = SECRET\n    verification_token_secret = SECRET\n\n    async def on_after_register(self, user: User, request: Optional[Request] = None):\n        print(f\"User {user.id} has registered.\")\n\n    async def on_after_forgot_password(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n\n    async def on_after_request_verify(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"Verification requested for user {user.id}. Verification token: {token}\")\n\n\nasync def get_user_manager(user_db: BeanieUserDatabase = Depends(get_user_db)):\n    yield UserManager(user_db)\n\n\nbearer_transport = BearerTransport(tokenUrl=\"auth/jwt/login\")\n\n\ndef get_jwt_strategy() -&gt; JWTStrategy:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n\n\nauth_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=bearer_transport,\n    get_strategy=get_jwt_strategy,\n)\n\nfastapi_users = FastAPIUsers[User, PydanticObjectId](get_user_manager, [auth_backend])\n\ncurrent_active_user = fastapi_users.current_user(active=True)\n</code></pre>"},{"location":"configuration/full-example/#what-now","title":"What now?","text":"<p>You're ready to go! Be sure to check the Usage section to understand how to work with FastAPI Users.</p>"},{"location":"configuration/oauth/","title":"OAuth2","text":"<p>FastAPI Users provides an optional OAuth2 authentication support. It relies on HTTPX OAuth library, which is a pure-async implementation of OAuth2.</p>"},{"location":"configuration/oauth/#installation","title":"Installation","text":"<p>You should install the library with the optional dependencies for OAuth:</p> <pre><code>pip install 'fastapi-users[sqlalchemy,oauth]'\n</code></pre> <pre><code>pip install 'fastapi-users[beanie,oauth]'\n</code></pre>"},{"location":"configuration/oauth/#configuration","title":"Configuration","text":""},{"location":"configuration/oauth/#instantiate-an-oauth2-client","title":"Instantiate an OAuth2 client","text":"<p>You first need to get an HTTPX OAuth client instance. Read the documentation for more information.</p> <pre><code>from httpx_oauth.clients.google import GoogleOAuth2\n\ngoogle_oauth_client = GoogleOAuth2(\"CLIENT_ID\", \"CLIENT_SECRET\")\n</code></pre>"},{"location":"configuration/oauth/#setup-the-database-adapter","title":"Setup the database adapter","text":""},{"location":"configuration/oauth/#sqlalchemy","title":"SQLAlchemy","text":"<p>You'll need to define the SQLAlchemy model for storing OAuth accounts. We provide a base one for this:</p> <pre><code>from collections.abc import AsyncGenerator\n\nfrom fastapi import Depends\nfrom fastapi_users.db import (\n    SQLAlchemyBaseOAuthAccountTableUUID,\n    SQLAlchemyBaseUserTableUUID,\n    SQLAlchemyUserDatabase,\n)\nfrom sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, relationship\n\nDATABASE_URL = \"sqlite+aiosqlite:///./test.db\"\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass OAuthAccount(SQLAlchemyBaseOAuthAccountTableUUID, Base):\n    pass\n\n\nclass User(SQLAlchemyBaseUserTableUUID, Base):\n    oauth_accounts: Mapped[list[OAuthAccount]] = relationship(\n        \"OAuthAccount\", lazy=\"joined\"\n    )\n\n\nengine = create_async_engine(DATABASE_URL)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\n\n\nasync def create_db_and_tables():\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n\nasync def get_async_session() -&gt; AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session\n\n\nasync def get_user_db(session: AsyncSession = Depends(get_async_session)):\n    yield SQLAlchemyUserDatabase(session, User, OAuthAccount)\n</code></pre> <p>Notice that we also manually added a <code>relationship</code> on <code>User</code> so that SQLAlchemy can properly retrieve the OAuth accounts of the user.</p> <p>Besides, when instantiating the database adapter, we need pass this SQLAlchemy model as third argument.</p> <p>Primary key is defined as UUID</p> <p>By default, we use UUID as a primary key ID for your user. If you want to use another type, like an auto-incremented integer, you can use <code>SQLAlchemyBaseOAuthAccountTable</code> as base class and define your own <code>id</code> and <code>user_id</code> column.</p> <pre><code>class OAuthAccount(SQLAlchemyBaseOAuthAccountTable[int], Base):\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n\n    @declared_attr\n    def user_id(cls) -&gt; Mapped[int]:\n        return mapped_column(Integer, ForeignKey(\"user.id\", ondelete=\"cascade\"), nullable=False)\n</code></pre> <p>Notice that <code>SQLAlchemyBaseOAuthAccountTable</code> expects a generic type to define the actual type of ID you use.</p>"},{"location":"configuration/oauth/#beanie","title":"Beanie","text":"<p>The advantage of MongoDB is that you can easily embed sub-objects in a single document. That's why the configuration for Beanie is quite simple. All we need to do is to define another class to structure an OAuth account object.</p> <pre><code>import motor.motor_asyncio\nfrom beanie import Document\nfrom fastapi_users.db import BaseOAuthAccount, BeanieBaseUser, BeanieUserDatabase\nfrom pydantic import Field\n\nDATABASE_URL = \"mongodb://localhost:27017\"\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\ndb = client[\"database_name\"]\n\n\nclass OAuthAccount(BaseOAuthAccount):\n    pass\n\n\nclass User(BeanieBaseUser, Document):\n    oauth_accounts: list[OAuthAccount] = Field(default_factory=list)\n\n\nasync def get_user_db():\n    yield BeanieUserDatabase(User, OAuthAccount)\n</code></pre> <p>It's worth to note that <code>OAuthAccount</code> is not a Beanie document but a Pydantic model that we'll embed inside the <code>User</code> document, through the <code>oauth_accounts</code> array.</p>"},{"location":"configuration/oauth/#generate-routers","title":"Generate routers","text":"<p>Once you have a <code>FastAPIUsers</code> instance, you can make it generate a single OAuth router for a given client and authentication backend.</p> <pre><code>app.include_router(\n    fastapi_users.get_oauth_router(google_oauth_client, auth_backend, \"SECRET\"),\n    prefix=\"/auth/google\",\n    tags=[\"auth\"],\n)\n</code></pre> <p>Tip</p> <p>If you have several OAuth clients and/or several authentication backends, you'll need to create a router for each pair you want to support.</p>"},{"location":"configuration/oauth/#existing-account-association","title":"Existing account association","text":"<p>If a user with the same e-mail address already exists, an HTTP 400 error will be raised by default.</p> <p>You can however choose to automatically link this OAuth account to the existing user account by setting the <code>associate_by_email</code> flag:</p> <pre><code>app.include_router(\n    fastapi_users.get_oauth_router(\n        google_oauth_client,\n        auth_backend,\n        \"SECRET\",\n        associate_by_email=True,\n    ),\n    prefix=\"/auth/google\",\n    tags=[\"auth\"],\n)\n</code></pre> <p>Bear in mind though that it can lead to security breaches if the OAuth provider does not validate e-mail addresses. How?</p> <ul> <li>Let's say your app support an OAuth provider, Merlinbook, which does not validate e-mail addresses.</li> <li>Imagine a user registers to your app with the e-mail address <code>lancelot@camelot.bt</code>.</li> <li>Now, a malicious user creates an account on Merlinbook with the same e-mail address. Without e-mail validation, the malicious user can use this account without limitation.</li> <li>The malicious user authenticates using Merlinbook OAuth on your app, which automatically associates to the existing <code>lancelot@camelot.bt</code>.</li> <li>Now, the malicious user has full access to the user account on your app \ud83d\ude1e</li> </ul>"},{"location":"configuration/oauth/#association-router-for-authenticated-users","title":"Association router for authenticated users","text":"<p>We also provide a router to associate an already authenticated user with an OAuth account. After this association, the user will be able to authenticate with this OAuth provider.</p> <pre><code>app.include_router(\n    fastapi_users.get_oauth_associate_router(google_oauth_client, UserRead, \"SECRET\"),\n    prefix=\"/auth/associate/google\",\n    tags=[\"auth\"],\n)\n</code></pre> <p>Notice that, just like for the Users router, you have to pass the <code>UserRead</code> Pydantic schema.</p>"},{"location":"configuration/oauth/#set-is_verified-to-true-by-default","title":"Set <code>is_verified</code> to <code>True</code> by default","text":"<p>This section is only useful if you set up email verification</p> <p>You can read more about this feature here.</p> <p>When a new user registers with an OAuth provider, the <code>is_verified</code> flag is set to <code>False</code>, which requires the user to verify its email address.</p> <p>You can choose to trust the email address given by the OAuth provider and set the <code>is_verified</code> flag to <code>True</code> after registration. You can do this by setting the <code>is_verified_by_default</code> argument:</p> <pre><code>app.include_router(\n    fastapi_users.get_oauth_router(\n        google_oauth_client,\n        auth_backend,\n        \"SECRET\",\n        is_verified_by_default=True,\n    ),\n    prefix=\"/auth/google\",\n    tags=[\"auth\"],\n)\n</code></pre> <p>Make sure you can trust the OAuth provider</p> <p>Make sure the OAuth provider you're using does verify the email address before enabling this flag.</p>"},{"location":"configuration/oauth/#full-example","title":"Full example","text":"<p>Warning</p> <p>Notice that SECRET should be changed to a strong passphrase. Insecure passwords may give attackers full access to your database.</p>"},{"location":"configuration/oauth/#sqlalchemy_1","title":"SQLAlchemy","text":"<p>Open </p> requirements.txtmain.pyapp/app.pyapp/db.pyapp/schemas.pyapp/users.py <pre><code>fastapi\nfastapi-users[sqlalchemy,oauth]\nuvicorn[standard]\naiosqlite\n</code></pre> <pre><code>import uvicorn\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"app.app:app\", host=\"0.0.0.0\", log_level=\"info\")\n</code></pre> <pre><code>from contextlib import asynccontextmanager\n\nfrom fastapi import Depends, FastAPI\n\nfrom app.db import User, create_db_and_tables\nfrom app.schemas import UserCreate, UserRead, UserUpdate\nfrom app.users import (\n    SECRET,\n    auth_backend,\n    current_active_user,\n    fastapi_users,\n    google_oauth_client,\n)\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Not needed if you setup a migration system like Alembic\n    await create_db_and_tables()\n    yield\n\n\napp = FastAPI(lifespan=lifespan)\n\napp.include_router(\n    fastapi_users.get_auth_router(auth_backend), prefix=\"/auth/jwt\", tags=[\"auth\"]\n)\napp.include_router(\n    fastapi_users.get_register_router(UserRead, UserCreate),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_reset_password_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_verify_router(UserRead),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_users_router(UserRead, UserUpdate),\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\napp.include_router(\n    fastapi_users.get_oauth_router(google_oauth_client, auth_backend, SECRET),\n    prefix=\"/auth/google\",\n    tags=[\"auth\"],\n)\n\n\n@app.get(\"/authenticated-route\")\nasync def authenticated_route(user: User = Depends(current_active_user)):\n    return {\"message\": f\"Hello {user.email}!\"}\n</code></pre> <pre><code>from collections.abc import AsyncGenerator\n\nfrom fastapi import Depends\nfrom fastapi_users.db import (\n    SQLAlchemyBaseOAuthAccountTableUUID,\n    SQLAlchemyBaseUserTableUUID,\n    SQLAlchemyUserDatabase,\n)\nfrom sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, relationship\n\nDATABASE_URL = \"sqlite+aiosqlite:///./test.db\"\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass OAuthAccount(SQLAlchemyBaseOAuthAccountTableUUID, Base):\n    pass\n\n\nclass User(SQLAlchemyBaseUserTableUUID, Base):\n    oauth_accounts: Mapped[list[OAuthAccount]] = relationship(\n        \"OAuthAccount\", lazy=\"joined\"\n    )\n\n\nengine = create_async_engine(DATABASE_URL)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\n\n\nasync def create_db_and_tables():\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n\nasync def get_async_session() -&gt; AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session\n\n\nasync def get_user_db(session: AsyncSession = Depends(get_async_session)):\n    yield SQLAlchemyUserDatabase(session, User, OAuthAccount)\n</code></pre> <pre><code>import uuid\n\nfrom fastapi_users import schemas\n\n\nclass UserRead(schemas.BaseUser[uuid.UUID]):\n    pass\n\n\nclass UserCreate(schemas.BaseUserCreate):\n    pass\n\n\nclass UserUpdate(schemas.BaseUserUpdate):\n    pass\n</code></pre> <pre><code>import os\nimport uuid\nfrom typing import Optional\n\nfrom fastapi import Depends, Request\nfrom fastapi_users import BaseUserManager, FastAPIUsers, UUIDIDMixin, models\nfrom fastapi_users.authentication import (\n    AuthenticationBackend,\n    BearerTransport,\n    JWTStrategy,\n)\nfrom fastapi_users.db import SQLAlchemyUserDatabase\nfrom httpx_oauth.clients.google import GoogleOAuth2\n\nfrom app.db import User, get_user_db\n\nSECRET = \"SECRET\"\n\ngoogle_oauth_client = GoogleOAuth2(\n    os.getenv(\"GOOGLE_OAUTH_CLIENT_ID\", \"\"),\n    os.getenv(\"GOOGLE_OAUTH_CLIENT_SECRET\", \"\"),\n)\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    reset_password_token_secret = SECRET\n    verification_token_secret = SECRET\n\n    async def on_after_register(self, user: User, request: Optional[Request] = None):\n        print(f\"User {user.id} has registered.\")\n\n    async def on_after_forgot_password(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n\n    async def on_after_request_verify(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"Verification requested for user {user.id}. Verification token: {token}\")\n\n\nasync def get_user_manager(user_db: SQLAlchemyUserDatabase = Depends(get_user_db)):\n    yield UserManager(user_db)\n\n\nbearer_transport = BearerTransport(tokenUrl=\"auth/jwt/login\")\n\n\ndef get_jwt_strategy() -&gt; JWTStrategy[models.UP, models.ID]:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n\n\nauth_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=bearer_transport,\n    get_strategy=get_jwt_strategy,\n)\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](get_user_manager, [auth_backend])\n\ncurrent_active_user = fastapi_users.current_user(active=True)\n</code></pre>"},{"location":"configuration/oauth/#beanie_1","title":"Beanie","text":"<p>Open </p> requirements.txtmain.pyapp/app.pyapp/db.pyapp/schemas.pyapp/users.py <pre><code>fastapi\nfastapi-users[beanie,oauth]\nuvicorn[standard]\n</code></pre> <pre><code>import uvicorn\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"app.app:app\", host=\"0.0.0.0\", log_level=\"info\")\n</code></pre> <pre><code>from contextlib import asynccontextmanager\n\nfrom beanie import init_beanie\nfrom fastapi import Depends, FastAPI\n\nfrom app.db import User, db\nfrom app.schemas import UserCreate, UserRead, UserUpdate\nfrom app.users import (\n    SECRET,\n    auth_backend,\n    current_active_user,\n    fastapi_users,\n    google_oauth_client,\n)\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await init_beanie(\n        database=db,\n        document_models=[\n            User,\n        ],\n    )\n    yield\n\n\napp = FastAPI(lifespan=lifespan)\n\napp.include_router(\n    fastapi_users.get_auth_router(auth_backend), prefix=\"/auth/jwt\", tags=[\"auth\"]\n)\napp.include_router(\n    fastapi_users.get_register_router(UserRead, UserCreate),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_reset_password_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_verify_router(UserRead),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_users_router(UserRead, UserUpdate),\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\napp.include_router(\n    fastapi_users.get_oauth_router(google_oauth_client, auth_backend, SECRET),\n    prefix=\"/auth/google\",\n    tags=[\"auth\"],\n)\n\n\n@app.get(\"/authenticated-route\")\nasync def authenticated_route(user: User = Depends(current_active_user)):\n    return {\"message\": f\"Hello {user.email}!\"}\n</code></pre> <pre><code>import motor.motor_asyncio\nfrom beanie import Document\nfrom fastapi_users.db import BaseOAuthAccount, BeanieBaseUser, BeanieUserDatabase\nfrom pydantic import Field\n\nDATABASE_URL = \"mongodb://localhost:27017\"\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\ndb = client[\"database_name\"]\n\n\nclass OAuthAccount(BaseOAuthAccount):\n    pass\n\n\nclass User(BeanieBaseUser, Document):\n    oauth_accounts: list[OAuthAccount] = Field(default_factory=list)\n\n\nasync def get_user_db():\n    yield BeanieUserDatabase(User, OAuthAccount)\n</code></pre> <pre><code>from beanie import PydanticObjectId\nfrom fastapi_users import schemas\n\n\nclass UserRead(schemas.BaseUser[PydanticObjectId]):\n    pass\n\n\nclass UserCreate(schemas.BaseUserCreate):\n    pass\n\n\nclass UserUpdate(schemas.BaseUserUpdate):\n    pass\n</code></pre> <pre><code>import os\nfrom typing import Optional\n\nfrom beanie import PydanticObjectId\nfrom fastapi import Depends, Request\nfrom fastapi_users import BaseUserManager, FastAPIUsers, models\nfrom fastapi_users.authentication import (\n    AuthenticationBackend,\n    BearerTransport,\n    JWTStrategy,\n)\nfrom fastapi_users.db import BeanieUserDatabase, ObjectIDIDMixin\nfrom httpx_oauth.clients.google import GoogleOAuth2\n\nfrom app.db import User, get_user_db\n\nSECRET = \"SECRET\"\n\ngoogle_oauth_client = GoogleOAuth2(\n    os.getenv(\"GOOGLE_OAUTH_CLIENT_ID\", \"\"),\n    os.getenv(\"GOOGLE_OAUTH_CLIENT_SECRET\", \"\"),\n)\n\n\nclass UserManager(ObjectIDIDMixin, BaseUserManager[User, PydanticObjectId]):\n    reset_password_token_secret = SECRET\n    verification_token_secret = SECRET\n\n    async def on_after_register(self, user: User, request: Optional[Request] = None):\n        print(f\"User {user.id} has registered.\")\n\n    async def on_after_forgot_password(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n\n    async def on_after_request_verify(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"Verification requested for user {user.id}. Verification token: {token}\")\n\n\nasync def get_user_manager(user_db: BeanieUserDatabase = Depends(get_user_db)):\n    yield UserManager(user_db)\n\n\nbearer_transport = BearerTransport(tokenUrl=\"auth/jwt/login\")\n\n\ndef get_jwt_strategy() -&gt; JWTStrategy[models.UP, models.ID]:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n\n\nauth_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=bearer_transport,\n    get_strategy=get_jwt_strategy,\n)\n\nfastapi_users = FastAPIUsers[User, PydanticObjectId](get_user_manager, [auth_backend])\n\ncurrent_active_user = fastapi_users.current_user(active=True)\n</code></pre>"},{"location":"configuration/overview/","title":"Overview","text":"<p>The schema below shows you how the library is structured and how each part fit together.</p> <pre><code>flowchart TB\n    FASTAPI_USERS{FastAPIUsers}\n    USER_MANAGER{UserManager}\n    USER_MODEL{User model}\n    DATABASE_DEPENDENCY[[get_user_db]]\n    USER_MANAGER_DEPENDENCY[[get_user_manager]]\n    CURRENT_USER[[current_user]]\n    subgraph SCHEMAS[Schemas]\n        USER[User]\n        USER_CREATE[UserCreate]\n        USER_UPDATE[UserUpdate]\n    end\n    subgraph DATABASE[Database adapters]\n        SQLALCHEMY[SQLAlchemy]\n        BEANIE[Beanie]\n    end\n    subgraph ROUTERS[Routers]\n        AUTH[[get_auth_router]]\n        OAUTH[[get_oauth_router]]\n        OAUTH_ASSOCIATE[[get_oauth_associate_router]]\n        REGISTER[[get_register_router]]\n        VERIFY[[get_verify_router]]\n        RESET[[get_reset_password_router]]\n        USERS[[get_users_router]]\n    end\n    subgraph AUTH_BACKENDS[Authentication]\n        subgraph TRANSPORTS[Transports]\n            COOKIE[CookieTransport]\n            BEARER[BearerTransport]\n        end\n        subgraph STRATEGIES[Strategies]\n            DB[DatabaseStrategy]\n            JWT[JWTStrategy]\n            REDIS[RedisStrategy]\n        end\n        AUTH_BACKEND{AuthenticationBackend}\n    end\n    DATABASE --&gt; DATABASE_DEPENDENCY\n    USER_MODEL --&gt; DATABASE_DEPENDENCY\n    DATABASE_DEPENDENCY --&gt; USER_MANAGER\n\n    USER_MANAGER --&gt; USER_MANAGER_DEPENDENCY\n    USER_MANAGER_DEPENDENCY --&gt; FASTAPI_USERS\n\n    FASTAPI_USERS --&gt; ROUTERS\n\n    TRANSPORTS --&gt; AUTH_BACKEND\n    STRATEGIES --&gt; AUTH_BACKEND\n\n    AUTH_BACKEND --&gt; ROUTERS\n    AUTH_BACKEND --&gt; FASTAPI_USERS\n\n    FASTAPI_USERS --&gt; CURRENT_USER\n\n    SCHEMAS --&gt; ROUTERS</code></pre>"},{"location":"configuration/overview/#user-model-and-database-adapters","title":"User model and database adapters","text":"<p>FastAPI Users is compatible with various databases and ORM. To build the interface between those database tools and the library, we provide database adapters classes that you need to instantiate and configure.</p> <p>\u27a1\ufe0f I'm using SQLAlchemy</p> <p>\u27a1\ufe0f I'm using Beanie</p>"},{"location":"configuration/overview/#authentication-backends","title":"Authentication backends","text":"<p>Authentication backends define the way users sessions are managed in your app, like access tokens or cookies.</p> <p>They are composed of two parts: a transport, which is how the token will be carried over the requests (e.g. cookies, headers...) and a strategy, which is how the token will be generated and secured (e.g. a JWT, a token in database...).</p> <p>\u27a1\ufe0f Configure the authentication backends</p>"},{"location":"configuration/overview/#usermanager","title":"<code>UserManager</code>","text":"<p>The <code>UserManager</code> object bears most of the logic of FastAPI Users: registration, verification, password reset... We provide a <code>BaseUserManager</code> with this common logic; which you should overload to define how to validate passwords or handle events.</p> <p>This <code>UserManager</code> object should be provided through a FastAPI dependency, <code>get_user_manager</code>.</p> <p>\u27a1\ufe0f Configure <code>UserManager</code></p>"},{"location":"configuration/overview/#schemas","title":"Schemas","text":"<p>FastAPI is heavily using Pydantic models to validate request payloads and serialize responses. FastAPI Users is no exception and will expect you to provide Pydantic schemas representing a user when it's read, created and updated.</p> <p>\u27a1\ufe0f Configure schemas</p>"},{"location":"configuration/overview/#fastapiusers-and-routers","title":"<code>FastAPIUsers</code> and routers","text":"<p>Finally, <code>FastAPIUsers</code> object is the main class from which you'll be able to generate routers for classic routes like registration or login, but also get the <code>current_user</code> dependency factory to inject the authenticated user in your own routes.</p> <p>\u27a1\ufe0f Configure <code>FastAPIUsers</code> and routers</p>"},{"location":"configuration/password-hash/","title":"Password hash","text":"<p>By default, FastAPI Users will use the Argon2 algorithm to hash and salt passwords before storing them in the database, with backwards-compatibility with Bcrypt.</p> <p>The implementation is provided by pwdlib, a modern password hashing wrapper.</p>"},{"location":"configuration/password-hash/#customize-passwordhash","title":"Customize <code>PasswordHash</code>","text":"<p>If you need to tune the algorithms used or their settings, you can customize the <code>PasswordHash</code> object of pwdlib.</p> <p>For this, you'll need to instantiate the <code>PasswordHelper</code> class and pass it your <code>PasswordHash</code>. The example below shows you how you can create a <code>PasswordHash</code> to only support the Argon2 algorithm.</p> <pre><code>from fastapi_users.password import PasswordHelper\nfrom pwdlib import PasswordHash, exceptions\nfrom pwdlib.hashers.argon2 import Argon2Hasher\n\npassword_hash = PasswordHash((\n    Argon2Hasher(),\n))\npassword_helper = PasswordHelper(password_hash)\n</code></pre> <p>Finally, pass the <code>password_helper</code> variable while instantiating your <code>UserManager</code>:</p> <pre><code>async def get_user_manager(user_db=Depends(get_user_db)):\n    yield UserManager(user_db, password_helper)\n</code></pre> <p>Password hashes are automatically upgraded</p> <p>FastAPI Users takes care of upgrading the password hash to a more recent algorithm when needed.</p> <p>Typically, when a user logs in, we'll check if the password hash algorithm is deprecated.</p> <p>If it is, we take the opportunity of having the password in plain-text at hand (since the user just logged in!) to hash it with a better algorithm and update it in database.</p>"},{"location":"configuration/password-hash/#full-customization","title":"Full customization","text":"<p>If you don't wish to use <code>pwdlib</code> at all \u2013 which we don't recommend unless you're absolutely sure of what you're doing \u2014 you can implement your own <code>PasswordHelper</code> class as long as it implements the <code>PasswordHelperProtocol</code> and its methods.</p> <pre><code>from typing import Tuple\n\nfrom fastapi_users.password import PasswordHelperProtocol\n\nclass PasswordHelper(PasswordHelperProtocol):\n    def verify_and_update(\n        self, plain_password: str, hashed_password: str\n    ) -&gt; Tuple[bool, str]:\n        ...\n\n    def hash(self, password: str) -&gt; str:\n        ...\n\n    def generate(self) -&gt; str:\n        ...\n</code></pre>"},{"location":"configuration/schemas/","title":"Schemas","text":"<p>FastAPI is heavily using Pydantic models to validate request payloads and serialize responses. FastAPI Users is no exception and will expect you to provide Pydantic schemas representing a user when it's read, created and updated.</p> <p>It's different from your <code>User</code> model, which is an object that actually interacts with the database. Those schemas on the other hand are here to validate data and correctly serialize it in the API.</p> <p>FastAPI Users provides a base structure to cover its needs. It is structured like this:</p> <ul> <li><code>id</code> (<code>ID</code>) \u2013 Unique identifier of the user. It matches the type of your ID, like UUID or integer.</li> <li><code>email</code> (<code>str</code>) \u2013 Email of the user. Validated by <code>email-validator</code>.</li> <li><code>is_active</code> (<code>bool</code>) \u2013 Whether or not the user is active. If not, login and forgot password requests will be denied. Defaults to <code>True</code>.</li> <li><code>is_verified</code> (<code>bool</code>) \u2013 Whether or not the user is verified. Optional but helpful with the <code>verify</code> router logic. Defaults to <code>False</code>.</li> <li><code>is_superuser</code> (<code>bool</code>) \u2013 Whether or not the user is a superuser. Useful to implement administration logic. Defaults to <code>False</code>.</li> </ul>"},{"location":"configuration/schemas/#define-your-schemas","title":"Define your schemas","text":"<p>There are four Pydantic models variations provided as mixins:</p> <ul> <li><code>BaseUser</code>, which provides the basic fields and validation;</li> <li><code>BaseCreateUser</code>, dedicated to user registration, which consists of compulsory <code>email</code> and <code>password</code> fields;</li> <li><code>BaseUpdateUser</code>, dedicated to user profile update, which adds an optional <code>password</code> field;</li> </ul> <p>You should define each of those variations, inheriting from each mixin:</p> <pre><code>import uuid\n\nfrom fastapi_users import schemas\n\n\nclass UserRead(schemas.BaseUser[uuid.UUID]):\n    pass\n\n\nclass UserCreate(schemas.BaseUserCreate):\n    pass\n\n\nclass UserUpdate(schemas.BaseUserUpdate):\n    pass\n</code></pre> <p>Typing: ID generic type is expected</p> <p>You can see that we define a generic type when extending the <code>BaseUser</code> class. It should correspond to the type of ID you use on your model. Here, we chose UUID, but it can be anything, like an integer or a MongoDB ObjectID.</p>"},{"location":"configuration/schemas/#adding-your-own-fields","title":"Adding your own fields","text":"<p>You can of course add your own properties there to fit to your needs. In the example below, we add a required string property, <code>first_name</code>, and an optional date property, <code>birthdate</code>.</p> <pre><code>import datetime\nimport uuid\n\nfrom fastapi_users import schemas\n\n\nclass UserRead(schemas.BaseUser[uuid.UUID]):\n    first_name: str\n    birthdate: Optional[datetime.date]\n\n\nclass UserCreate(schemas.BaseUserCreate):\n    first_name: str\n    birthdate: Optional[datetime.date]\n\n\nclass UserUpdate(schemas.BaseUserUpdate):\n    first_name: Optional[str]\n    birthdate: Optional[datetime.date]\n</code></pre> <p>Make sure to mirror this in your database model</p> <p>The <code>User</code> model you defined earlier for your specific database will be the central object that will actually store the data. Therefore, you need to define the very same fields in it so the data can be actually stored.</p>"},{"location":"configuration/user-manager/","title":"UserManager","text":"<p>The <code>UserManager</code> class is the core logic of FastAPI Users. We provide the <code>BaseUserManager</code> class which you should extend to set some parameters and define logic, for example when a user just registered or forgot its password.</p> <p>It's designed to be easily extensible and customizable so that you can integrate your very own logic.</p>"},{"location":"configuration/user-manager/#create-your-usermanager-class","title":"Create your <code>UserManager</code> class","text":"<p>You should define your own version of the <code>UserManager</code> class to set various parameters.</p> <pre><code>import uuid\nfrom typing import Optional\n\nfrom fastapi import Depends, Request\nfrom fastapi_users import BaseUserManager, UUIDIDMixin\n\nfrom .db import User, get_user_db\n\nSECRET = \"SECRET\"\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    reset_password_token_secret = SECRET\n    verification_token_secret = SECRET\n\n    async def on_after_register(self, user: User, request: Optional[Request] = None):\n        print(f\"User {user.id} has registered.\")\n\n    async def on_after_forgot_password(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n\n    async def on_after_request_verify(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"Verification requested for user {user.id}. Verification token: {token}\")\n\n\nasync def get_user_manager(user_db=Depends(get_user_db)):\n    yield UserManager(user_db)\n</code></pre> <p>As you can see, you have to define here various attributes and methods. You can find the complete list of those below.</p> <p>Typing: User and ID generic types are expected</p> <p>You can see that we define two generic types when extending the base class:</p> <ul> <li><code>User</code>, which is the user model we defined in the database part</li> <li>The ID, which should correspond to the type of ID you use on your model. Here, we chose UUID, but it can be anything, like an integer or a MongoDB ObjectID.</li> </ul> <p>It'll help you to have good type-checking and auto-completion when implementing the custom methods.</p>"},{"location":"configuration/user-manager/#the-id-parser-mixin","title":"The ID parser mixin","text":"<p>Since the user ID is fully generic, we need a way to parse it reliably when it'll come from API requests, typically as URL path attributes.</p> <p>That's why we added the <code>UUIDIDMixin</code> in the example above. It implements the <code>parse_id</code> method, ensuring UUID are valid and correctly parsed.</p> <p>Of course, it's important that this logic matches the type of your ID. To help you with this, we provide mixins for the most common cases:</p> <ul> <li><code>UUIDIDMixin</code>, for UUID ID.</li> <li><code>IntegerIDMixin</code>, for integer ID.</li> <li><code>ObjectIDIDMixin</code> (provided by <code>fastapi_users_db_beanie</code>), for MongoDB ObjectID.</li> </ul> <p>Inheritance order matters</p> <p>Notice in your example that the mixin comes first in our <code>UserManager</code> inheritance. Because of the Method-Resolution-Order (MRO) of Python, the left-most element takes precedence.</p> <p>If you need another type of ID, you can simply overload the <code>parse_id</code> method on your <code>UserManager</code> class:</p> <pre><code>from fastapi_users import BaseUserManager, InvalidID\n\n\nclass UserManager(BaseUserManager[User, MyCustomID]):\n    def parse_id(self, value: Any) -&gt; MyCustomID:\n        try:\n            return MyCustomID(value)\n        except ValueError as e:\n            raise InvalidID() from e  # (1)!\n</code></pre> <ol> <li>If the ID can't be parsed into the desired type, you'll need to raise an <code>InvalidID</code> exception.</li> </ol>"},{"location":"configuration/user-manager/#create-get_user_manager-dependency","title":"Create <code>get_user_manager</code> dependency","text":"<p>The <code>UserManager</code> class will be injected at runtime using a FastAPI dependency. This way, you can run it in a database session or swap it with a mock during testing.</p> <pre><code>import uuid\nfrom typing import Optional\n\nfrom fastapi import Depends, Request\nfrom fastapi_users import BaseUserManager, UUIDIDMixin\n\nfrom .db import User, get_user_db\n\nSECRET = \"SECRET\"\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    reset_password_token_secret = SECRET\n    verification_token_secret = SECRET\n\n    async def on_after_register(self, user: User, request: Optional[Request] = None):\n        print(f\"User {user.id} has registered.\")\n\n    async def on_after_forgot_password(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n\n    async def on_after_request_verify(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"Verification requested for user {user.id}. Verification token: {token}\")\n\n\nasync def get_user_manager(user_db=Depends(get_user_db)):\n    yield UserManager(user_db)\n</code></pre> <p>Notice that we use the <code>get_user_db</code> dependency we defined earlier to inject the database instance.</p>"},{"location":"configuration/user-manager/#customize-attributes-and-methods","title":"Customize attributes and methods","text":""},{"location":"configuration/user-manager/#attributes","title":"Attributes","text":"<ul> <li><code>reset_password_token_secret</code>: Secret to encode reset password token. Use a strong passphrase and keep it secure.</li> <li><code>reset_password_token_lifetime_seconds</code>: Lifetime of reset password token. Defaults to 3600.</li> <li><code>reset_password_token_audience</code>: JWT audience of reset password token. Defaults to <code>fastapi-users:reset</code>.</li> <li><code>verification_token_secret</code>: Secret to encode verification token. Use a strong passphrase and keep it secure.</li> <li><code>verification_token_lifetime_seconds</code>: Lifetime of verification token. Defaults to 3600.</li> <li><code>verification_token_audience</code>: JWT audience of verification token. Defaults to <code>fastapi-users:verify</code>.</li> </ul>"},{"location":"configuration/user-manager/#methods","title":"Methods","text":""},{"location":"configuration/user-manager/#validate_password","title":"<code>validate_password</code>","text":"<p>Validate a password.</p> <p>Arguments</p> <ul> <li><code>password</code> (<code>str</code>): the password to validate.</li> <li><code>user</code> (<code>Union[UserCreate, User]</code>): user model which we are currently validating the password. Useful if you want to check that the password doesn't contain the name or the birthdate of the user for example.</li> </ul> <p>Output</p> <p>This function should return <code>None</code> if the password is valid or raise <code>InvalidPasswordException</code> if not. This exception expects an argument <code>reason</code> telling why the password is invalid. It'll be part of the error response.</p> <p>Example</p> <pre><code>from fastapi_users import BaseUserManager, InvalidPasswordException, UUIDIDMixin\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    # ...\n    async def validate_password(\n        self,\n        password: str,\n        user: Union[UserCreate, User],\n    ) -&gt; None:\n        if len(password) &lt; 8:\n            raise InvalidPasswordException(\n                reason=\"Password should be at least 8 characters\"\n            )\n        if user.email in password:\n            raise InvalidPasswordException(\n                reason=\"Password should not contain e-mail\"\n            )\n</code></pre>"},{"location":"configuration/user-manager/#on_after_register","title":"<code>on_after_register</code>","text":"<p>Perform logic after successful user registration.</p> <p>Typically, you'll want to send a welcome e-mail or add it to your marketing analytics pipeline.</p> <p>Arguments</p> <ul> <li><code>user</code> (<code>User</code>): the registered user.</li> <li><code>request</code> (<code>Optional[Request]</code>): optional FastAPI request object that triggered the operation. Defaults to None.</li> </ul> <p>Example</p> <pre><code>from fastapi_users import BaseUserManager, UUIDIDMixin\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    # ...\n    async def on_after_register(self, user: User, request: Optional[Request] = None):\n        print(f\"User {user.id} has registered.\")\n</code></pre>"},{"location":"configuration/user-manager/#on_after_update","title":"<code>on_after_update</code>","text":"<p>Perform logic after successful user update.</p> <p>It may be useful, for example, if you wish to update your user in a data analytics or customer success platform.</p> <p>Arguments</p> <ul> <li><code>user</code> (<code>User</code>): the updated user.</li> <li><code>update_dict</code> (<code>Dict[str, Any]</code>): dictionary with the updated user fields.</li> <li><code>request</code> (<code>Optional[Request]</code>): optional FastAPI request object that triggered the operation. Defaults to None.</li> </ul> <p>Example</p> <pre><code>from fastapi_users import BaseUserManager, UUIDIDMixin\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    # ...\n    async def on_after_update(\n        self,\n        user: User,\n        update_dict: Dict[str, Any],\n        request: Optional[Request] = None,\n    ):\n        print(f\"User {user.id} has been updated with {update_dict}.\")\n</code></pre>"},{"location":"configuration/user-manager/#on_after_login","title":"<code>on_after_login</code>","text":"<p>Perform logic after a successful user login.</p> <p>It may be useful for custom logic or processes triggered by new logins, for example a daily login reward or for analytics.</p> <p>Arguments</p> <ul> <li><code>user</code> (<code>User</code>): the updated user.</li> <li><code>request</code> (<code>Optional[Request]</code>): optional FastAPI request object that triggered the operation. Defaults to None.</li> <li><code>response</code> (<code>Optional[Response]</code>): Optional response built by the transport. Defaults to None.</li> </ul> <p>Example</p> <pre><code>from fastapi_users import BaseUserManager, UUIDIDMixin\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    # ...\n    async def on_after_login(\n        self,\n        user: User,\n        request: Optional[Request] = None,\n        response: Optional[Response] = None,\n    ):\n        print(f\"User {user.id} logged in.\")\n</code></pre>"},{"location":"configuration/user-manager/#on_after_request_verify","title":"<code>on_after_request_verify</code>","text":"<p>Perform logic after successful verification request.</p> <p>Typically, you'll want to send an e-mail with the link (and the token) that allows the user to verify their e-mail.</p> <p>Arguments</p> <ul> <li><code>user</code> (<code>User</code>): the user to verify.</li> <li><code>token</code> (<code>str</code>): the verification token.</li> <li><code>request</code> (<code>Optional[Request]</code>): optional FastAPI request object that triggered the operation. Defaults to None.</li> </ul> <p>Example</p> <pre><code>from fastapi_users import BaseUserManager, UUIDIDMixin\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    # ...\n    async def on_after_request_verify(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"Verification requested for user {user.id}. Verification token: {token}\")\n</code></pre>"},{"location":"configuration/user-manager/#on_after_verify","title":"<code>on_after_verify</code>","text":"<p>Perform logic after successful user verification.</p> <p>This may be useful if you wish to send another e-mail or store this information in a data analytics or customer success platform.</p> <p>Arguments</p> <ul> <li><code>user</code> (<code>User</code>): the verified user.</li> <li><code>request</code> (<code>Optional[Request]</code>): optional FastAPI request object that triggered the operation. Defaults to None.</li> </ul> <p>Example</p> <pre><code>from fastapi_users import BaseUserManager, UUIDIDMixin\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    # ...\n    async def on_after_verify(\n        self, user: User, request: Optional[Request] = None\n    ):\n        print(f\"User {user.id} has been verified\")\n</code></pre>"},{"location":"configuration/user-manager/#on_after_forgot_password","title":"<code>on_after_forgot_password</code>","text":"<p>Perform logic after successful forgot password request.</p> <p>Typically, you'll want to send an e-mail with the link (and the token) that allows the user to reset their password.</p> <p>Arguments</p> <ul> <li><code>user</code> (<code>User</code>): the user that forgot its password.</li> <li><code>token</code> (<code>str</code>): the forgot password token</li> <li><code>request</code> (<code>Optional[Request]</code>): optional FastAPI request object that triggered the operation. Defaults to None.</li> </ul> <p>Example</p> <pre><code>from fastapi_users import BaseUserManager, UUIDIDMixin\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    # ...\n    async def on_after_forgot_password(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n</code></pre>"},{"location":"configuration/user-manager/#on_after_reset_password","title":"<code>on_after_reset_password</code>","text":"<p>Perform logic after successful password reset.</p> <p>For example, you may want to send an e-mail to the concerned user to warn him that their password has been changed and that they should take action if they think they have been hacked.</p> <p>Arguments</p> <ul> <li><code>user</code> (<code>User</code>): the user that reset its password.</li> <li><code>request</code> (<code>Optional[Request]</code>): optional FastAPI request object that triggered the operation. Defaults to None.</li> </ul> <p>Example</p> <pre><code>from fastapi_users import BaseUserManager, UUIDIDMixin\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    # ...\n    async def on_after_reset_password(self, user: User, request: Optional[Request] = None):\n        print(f\"User {user.id} has reset their password.\")\n</code></pre>"},{"location":"configuration/user-manager/#on_before_delete","title":"<code>on_before_delete</code>","text":"<p>Perform logic before user delete.</p> <p>For example, you may want to valide user resource integrity to see if any related user resource need to be marked inactive, or delete them recursively.</p> <p>Arguments</p> <ul> <li><code>user</code> (<code>User</code>): the user to be deleted.</li> <li><code>request</code> (<code>Optional[Request]</code>): optional FastAPI request object that triggered the operation. Defaults to None.</li> </ul> <p>Example</p> <pre><code>from fastapi_users import BaseUserManager, UUIDIDMixin\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    # ...\n    async def on_before_delete(self, user: User, request: Optional[Request] = None):\n        print(f\"User {user.id} is going to be deleted\")\n</code></pre>"},{"location":"configuration/user-manager/#on_after_delete","title":"<code>on_after_delete</code>","text":"<p>Perform logic after user delete.</p> <p>For example, you may want to send an email to the administrator about the event.</p> <p>Arguments</p> <ul> <li><code>user</code> (<code>User</code>): the user to be deleted.</li> <li><code>request</code> (<code>Optional[Request]</code>): optional FastAPI request object that triggered the operation. Defaults to None.</li> </ul> <p>Example</p> <pre><code>from fastapi_users import BaseUserManager, UUIDIDMixin\n\n\nclass UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    # ...\n    async def on_after_delete(self, user: User, request: Optional[Request] = None):\n        print(f\"User {user.id} is successfully deleted\")\n</code></pre>"},{"location":"configuration/authentication/","title":"Authentication","text":"<p>FastAPI Users allows you to plug in several authentication methods.</p>"},{"location":"configuration/authentication/#how-it-works","title":"How it works?","text":"<p>You can have several authentication methods, e.g. a cookie authentication for browser-based queries and a JWT token authentication for pure API queries.</p> <p>When checking authentication, each method is run one after the other. The first method yielding a user wins. If no method yields a user, an <code>HTTPException</code> is raised.</p> <p>For each backend, you'll be able to add a router with the corresponding <code>/login</code> and <code>/logout</code>. More on this in the routers documentation.</p>"},{"location":"configuration/authentication/#transport-strategy-authentication-backend","title":"Transport + Strategy = Authentication backend","text":"<p>An authentication backend is composed of two parts:</p>"},{"location":"configuration/authentication/#transport","title":"Transport","text":"<p>It manages how the token will be carried over the request. We currently provide two methods:</p>"},{"location":"configuration/authentication/#bearer","title":"Bearer","text":"<p>The token will be sent through an <code>Authorization: Bearer</code> header.</p> <p>Pros and cons</p> <ul> <li>\u2705 Easy to read and set in every requests.</li> <li>\u274c Needs to be stored manually somewhere in the client.</li> </ul> <p>\u27a1\ufe0f Use it if you want to implement a mobile application or a pure REST API.</p>"},{"location":"configuration/authentication/#cookie","title":"Cookie","text":"<p>The token will be sent through a cookie.</p> <p>Pros and cons</p> <ul> <li>\u2705 Automatically stored and sent securely by web browsers in every requests.</li> <li>\u2705 Automatically removed at expiration by web browsers.</li> <li>\u274c Needs a CSRF protection for maximum security.</li> <li>\u274c Harder to work with outside a browser, like a mobile app or a server.</li> </ul> <p>\u27a1\ufe0f Use it if you want to implement a web frontend.</p>"},{"location":"configuration/authentication/#strategy","title":"Strategy","text":"<p>It manages how the token is generated and secured. We currently provide three methods:</p>"},{"location":"configuration/authentication/#jwt","title":"JWT","text":"<p>The token is self-contained in a JSON Web Token.</p> <p>Pros and cons</p> <ul> <li>\u2705 Self-contained: it doesn't need to be stored in a database.</li> <li>\u274c Can't be invalidated on the server-side: it's valid until it expires.</li> </ul> <p>\u27a1\ufe0f Use it if you want to get up-and-running quickly.</p>"},{"location":"configuration/authentication/#database","title":"Database","text":"<p>The token is stored in a table (or collection) in your database.</p> <p>Pros and cons</p> <ul> <li>\u2705 Secure and performant.</li> <li>\u2705 Tokens can be invalidated server-side by removing them from the database.</li> <li>\u2705 Highly customizable: add your own fields, create an API to retrieve the active sessions of your users, etc.</li> <li>\u274c Configuration is a bit more complex.</li> </ul> <p>\u27a1\ufe0f Use it if you want maximum flexibility in your token management.</p>"},{"location":"configuration/authentication/#redis","title":"Redis","text":"<p>The token is stored in a Redis key-store.</p> <p>Pros and cons</p> <ul> <li>\u2705 Secure and performant.</li> <li>\u2705 Tokens can be invalidated server-side by removing them from Redis.</li> <li>\u274c A Redis server is needed.</li> </ul> <p>\u27a1\ufe0f Use it if you want maximum performance while being able to invalidate tokens.</p>"},{"location":"configuration/authentication/backend/","title":"Create a backend","text":"<p>As we said, a backend is the combination of a transport and a strategy. That way, you can create a complete strategy exactly fitting your needs.</p> <p>For this, you have to use the <code>AuthenticationBackend</code> class.</p> <pre><code>from fastapi_users.authentication import AuthenticationBackend, BearerTransport, JWTStrategy\n\nSECRET = \"SECRET\"\n\nbearer_transport = BearerTransport(tokenUrl=\"auth/jwt/login\")\n\ndef get_jwt_strategy() -&gt; JWTStrategy:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n\nauth_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=bearer_transport,\n    get_strategy=get_jwt_strategy,\n)\n</code></pre> <p>As you can see, instantiation is quite simple. It accepts the following arguments:</p> <ul> <li><code>name</code> (<code>str</code>): Name of the backend. Each backend should have a unique name.</li> <li><code>transport</code> (<code>Transport</code>): An instance of a <code>Transport</code> class.</li> <li><code>get_strategy</code> (<code>Callable[..., Strategy]</code>): A dependency callable returning an instance of a <code>Strategy</code> class.</li> </ul>"},{"location":"configuration/authentication/backend/#next-steps","title":"Next steps","text":"<p>You can have as many authentication backends as you wish. You'll then have to pass those backends to your <code>FastAPIUsers</code> instance and generate an auth router for each one of them.</p>"},{"location":"configuration/authentication/strategies/database/","title":"Database","text":"<p>The most natural way for storing tokens is of course the very same database you're using for your application. In this strategy, we set up a table (or collection) for storing those tokens with the associated user id. On each request, we try to retrieve this token from the database to get the corresponding user id.</p>"},{"location":"configuration/authentication/strategies/database/#configuration","title":"Configuration","text":"<p>The configuration of this strategy is a bit more complex than the others as it requires you to configure models and a database adapter, exactly like we did for users.</p>"},{"location":"configuration/authentication/strategies/database/#database-adapters","title":"Database adapters","text":"<p>An access token will be structured like this in your database:</p> <ul> <li><code>token</code> (<code>str</code>) \u2013 Unique identifier of the token. It's generated automatically upon login by the strategy.</li> <li><code>user_id</code> (<code>ID</code>) \u2013 User id. of the user associated to this token.</li> <li><code>created_at</code> (<code>datetime</code>) \u2013 Date and time of creation of the token. It's used to determine if the token is expired or not.</li> </ul> <p>We are providing a base model with those fields for each database we are supporting.</p>"},{"location":"configuration/authentication/strategies/database/#sqlalchemy","title":"SQLAlchemy","text":"<p>We'll expand from the basic SQLAlchemy configuration.</p> <pre><code>from collections.abc import AsyncGenerator\n\nfrom fastapi import Depends\nfrom fastapi_users.db import SQLAlchemyBaseUserTableUUID, SQLAlchemyUserDatabase\nfrom fastapi_users_db_sqlalchemy.access_token import (\n    SQLAlchemyAccessTokenDatabase,\n    SQLAlchemyBaseAccessTokenTableUUID,\n)\nfrom sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine\nfrom sqlalchemy.orm import DeclarativeBase\n\nDATABASE_URL = \"sqlite+aiosqlite:///./test.db\"\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(SQLAlchemyBaseUserTableUUID, Base):\n    pass\n\n\nclass AccessToken(SQLAlchemyBaseAccessTokenTableUUID, Base):  # (1)!\n    pass\n\n\nengine = create_async_engine(DATABASE_URL)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\n\n\nasync def create_db_and_tables():\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n\nasync def get_async_session() -&gt; AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session\n\n\nasync def get_user_db(session: AsyncSession = Depends(get_async_session)):\n    yield SQLAlchemyUserDatabase(session, User)\n\n\nasync def get_access_token_db(\n    session: AsyncSession = Depends(get_async_session),\n):  # (2)!\n    yield SQLAlchemyAccessTokenDatabase(session, AccessToken)\n</code></pre> <ol> <li> <p>We define an <code>AccessToken</code> ORM model inheriting from <code>SQLAlchemyBaseAccessTokenTableUUID</code>.</p> </li> <li> <p>We define a dependency to instantiate the <code>SQLAlchemyAccessTokenDatabase</code> class. Just like the user database adapter, it expects a fresh SQLAlchemy session and the <code>AccessToken</code> model class we defined above.</p> </li> </ol> <p><code>user_id</code> foreign key is defined as UUID</p> <p>By default, we use UUID as a primary key ID for your user, so we follow the same convention to define the foreign key pointing to the user.</p> <p>If you want to use another type, like an auto-incremented integer, you can use <code>SQLAlchemyBaseAccessTokenTable</code> as base class and define your own <code>user_id</code> column.</p> <pre><code>class AccessToken(SQLAlchemyBaseAccessTokenTable[int], Base):\n    @declared_attr\n    def user_id(cls) -&gt; Mapped[int]:\n        return mapped_column(Integer, ForeignKey(\"user.id\", ondelete=\"cascade\"), nullable=False)\n</code></pre> <p>Notice that <code>SQLAlchemyBaseAccessTokenTable</code> expects a generic type to define the actual type of ID you use.</p>"},{"location":"configuration/authentication/strategies/database/#beanie","title":"Beanie","text":"<p>We'll expand from the basic Beanie configuration.</p> <pre><code>import motor.motor_asyncio\nfrom beanie import Document\nfrom fastapi_users.db import BeanieBaseUser, BeanieUserDatabase\nfrom fastapi_users_db_beanie.access_token import (\n    BeanieAccessTokenDatabase,\n    BeanieBaseAccessToken,\n)\n\nDATABASE_URL = \"mongodb://localhost:27017\"\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\ndb = client[\"database_name\"]\n\n\nclass User(BeanieBaseUser, Document):\n    pass\n\n\nclass AccessToken(BeanieBaseAccessToken, Document):  # (1)!\n    pass\n\n\nasync def get_user_db():\n    yield BeanieUserDatabase(User)\n\n\nasync def get_access_token_db():  # (2)!\n    yield BeanieAccessTokenDatabase(AccessToken)\n</code></pre> <ol> <li> <p>We define an <code>AccessToken</code> ODM model inheriting from <code>BeanieBaseAccessToken</code>. Notice that we set a generic type to define the type of the <code>user_id</code> reference. By default, it's a standard MongoDB ObjectID.</p> </li> <li> <p>We define a dependency to instantiate the <code>BeanieAccessTokenDatabase</code> class. Just like the user database adapter, it expects the <code>AccessToken</code> model class we defined above.</p> </li> </ol> <p>Don't forget to add the <code>AccessToken</code> ODM model to the <code>document_models</code> array in your Beanie initialization, just like you did with the <code>User</code> model!</p> <p>Info</p> <p>If you want to add your own custom settings to your <code>AccessToken</code> document model - like changing the collection name - don't forget to let your inner <code>Settings</code> class inherit the pre-defined settings from <code>BeanieBaseAccessToken</code> like this: <code>Settings(BeanieBaseAccessToken.Settings): # ...</code>! See Beanie's documentation on <code>Settings</code> for details.</p>"},{"location":"configuration/authentication/strategies/database/#strategy","title":"Strategy","text":"<pre><code>import uuid\n\nfrom fastapi import Depends\nfrom fastapi_users.authentication.strategy.db import AccessTokenDatabase, DatabaseStrategy\n\nfrom .db import AccessToken, User\n\n\ndef get_database_strategy(\n    access_token_db: AccessTokenDatabase[AccessToken] = Depends(get_access_token_db),\n) -&gt; DatabaseStrategy:\n    return DatabaseStrategy(access_token_db, lifetime_seconds=3600)\n</code></pre> <p>As you can see, instantiation is quite simple. It accepts the following arguments:</p> <ul> <li><code>database</code> (<code>AccessTokenDatabase</code>): A database adapter instance for <code>AccessToken</code> table, like we defined above.</li> <li><code>lifetime_seconds</code> (<code>int</code>): The lifetime of the token in seconds.</li> </ul> <p>Why it's inside a function?</p> <p>To allow strategies to be instantiated dynamically with other dependencies, they have to be provided as a callable to the authentication backend.</p> <p>As you can see here, this pattern allows us to dynamically inject a connection to the database.</p>"},{"location":"configuration/authentication/strategies/database/#logout","title":"Logout","text":"<p>On logout, this strategy will delete the token from the database.</p>"},{"location":"configuration/authentication/strategies/jwt/","title":"JWT","text":"<p>JSON Web Token (JWT) is an internet standard for creating access tokens based on JSON. They don't need to be stored in a database: the data is self-contained inside and cryptographically signed.</p>"},{"location":"configuration/authentication/strategies/jwt/#configuration","title":"Configuration","text":"<pre><code>from fastapi_users.authentication import JWTStrategy\n\nSECRET = \"SECRET\"\n\ndef get_jwt_strategy() -&gt; JWTStrategy:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n</code></pre> <p>As you can see, instantiation is quite simple. It accepts the following arguments:</p> <ul> <li><code>secret</code> (<code>Union[str, pydantic.SecretStr]</code>): A constant secret which is used to encode the token. Use a strong passphrase and keep it secure.</li> <li><code>lifetime_seconds</code> (<code>Optional[int]</code>): The lifetime of the token in seconds. Can be set to <code>None</code> but in this case the token will be valid forever; which may raise serious security concerns.</li> <li><code>token_audience</code> (<code>Optional[List[str]]</code>): A list of valid audiences for the JWT token. Defaults to <code>[\"fastapi-users:auth\"]</code>.</li> <li><code>algorithm</code> (<code>Optional[str]</code>): The JWT encryption algorithm. See RFC 7519, section 8. Defaults to <code>\"HS256\"</code>.</li> <li><code>public_key</code> (<code>Optional[Union[str, pydantic.SecretStr]]</code>): If the JWT encryption algorithm requires a key pair instead of a simple secret, the key to decrypt the JWT may be provided here. The <code>secret</code> parameter will always be used to encrypt the JWT.</li> </ul> <p>Why it's inside a function?</p> <p>To allow strategies to be instantiated dynamically with other dependencies, they have to be provided as a callable to the authentication backend.</p> <p>For <code>JWTStrategy</code>, since it doesn't require dependencies, it can be as simple as the function above.</p>"},{"location":"configuration/authentication/strategies/jwt/#rs256-example","title":"RS256 example","text":"<pre><code>from fastapi_users.authentication import JWTStrategy\n\nPUBLIC_KEY = \"\"\"-----BEGIN PUBLIC KEY-----\n# Your RSA public key in PEM format goes here\n-----END PUBLIC KEY-----\"\"\"\n\nPRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n# Your RSA private key in PEM format goes here\n-----END RSA PRIVATE KEY-----\"\"\"\n\ndef get_jwt_strategy() -&gt; JWTStrategy:\n    return JWTStrategy(\n        secret=PRIVATE_KEY, \n        lifetime_seconds=3600,\n        algorithm=\"RS256\",\n        public_key=PUBLIC_KEY,\n    )\n</code></pre>"},{"location":"configuration/authentication/strategies/jwt/#logout","title":"Logout","text":"<p>On logout, this strategy won't do anything. Indeed, a JWT can't be invalidated on the server-side: it's valid until it expires.</p>"},{"location":"configuration/authentication/strategies/redis/","title":"Redis","text":"<p>Redis is an ultra-fast key-store database. As such, it's a good candidate for token management. In this strategy, a token is generated and associated with the user id. in the database. On each request, we try to retrieve this token from Redis to get the corresponding user id.</p>"},{"location":"configuration/authentication/strategies/redis/#installation","title":"Installation","text":"<p>You should install the library with the optional dependencies for Redis:</p> <pre><code>pip install 'fastapi-users[redis]'\n</code></pre>"},{"location":"configuration/authentication/strategies/redis/#configuration","title":"Configuration","text":"<pre><code>import redis.asyncio\nfrom fastapi_users.authentication import RedisStrategy\n\nredis = redis.asyncio.from_url(\"redis://localhost:6379\", decode_responses=True)\n\ndef get_redis_strategy() -&gt; RedisStrategy:\n    return RedisStrategy(redis, lifetime_seconds=3600)\n</code></pre> <p>As you can see, instantiation is quite simple. It accepts the following arguments:</p> <ul> <li><code>redis</code> (<code>redis.asyncio.Redis</code>): An instance of <code>redis.asyncio.Redis</code>. Note that the <code>decode_responses</code> flag set to <code>True</code> is necessary.</li> <li><code>lifetime_seconds</code> (<code>Optional[int]</code>): The lifetime of the token in seconds. Defaults to <code>None</code>, which means the token doesn't expire.</li> <li><code>key_prefix</code> (<code>str</code>): The prefix used to set the key in the Redis stored. Defaults to <code>fastapi_users_token:</code>.</li> </ul> <p>Why it's inside a function?</p> <p>To allow strategies to be instantiated dynamically with other dependencies, they have to be provided as a callable to the authentication backend.</p>"},{"location":"configuration/authentication/strategies/redis/#logout","title":"Logout","text":"<p>On logout, this strategy will delete the token from the Redis store.</p>"},{"location":"configuration/authentication/transports/bearer/","title":"Bearer","text":"<p>With this transport, the token is expected inside the <code>Authorization</code> header of the HTTP request with the <code>Bearer</code> scheme. It's particularly suited for pure API interaction or mobile apps.</p>"},{"location":"configuration/authentication/transports/bearer/#configuration","title":"Configuration","text":"<pre><code>from fastapi_users.authentication import BearerTransport\n\nbearer_transport = BearerTransport(tokenUrl=\"auth/jwt/login\")\n</code></pre> <p>As you can see, instantiation is quite simple. It accepts the following arguments:</p> <ul> <li><code>tokenUrl</code> (<code>str</code>): The exact path of your login endpoint. It'll allow the interactive documentation to automatically discover it and get a working Authorize button. In most cases, you'll probably need a relative path, not absolute. You can read more details about this in the FastAPI documentation.</li> </ul>"},{"location":"configuration/authentication/transports/bearer/#login","title":"Login","text":"<p>This method will return the in the following form upon successful login:</p> <p><code>200 OK</code></p> <pre><code>{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI\",\n    \"token_type\": \"bearer\"\n}\n</code></pre> <p>Check documentation about login route.</p>"},{"location":"configuration/authentication/transports/bearer/#logout","title":"Logout","text":"<p><code>204 No content</code></p>"},{"location":"configuration/authentication/transports/bearer/#authentication","title":"Authentication","text":"<p>This method expects that you provide a <code>Bearer</code> authentication with a valid token corresponding to your strategy.</p> <pre><code>curl http://localhost:9000/protected-route -H'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI'\n</code></pre>"},{"location":"configuration/authentication/transports/cookie/","title":"Cookie","text":"<p>Cookies are an easy way to store stateful information into the user browser. Thus, it is more useful for browser-based navigation (e.g. a front-end app making API requests) rather than pure API interaction.</p>"},{"location":"configuration/authentication/transports/cookie/#configuration","title":"Configuration","text":"<pre><code>from fastapi_users.authentication import CookieTransport\n\ncookie_transport = CookieTransport(cookie_max_age=3600)\n</code></pre> <p>As you can see, instantiation is quite simple. It accepts the following arguments:</p> <ul> <li><code>cookie_name</code> (<code>fastapiusersauth</code>): Name of the cookie.</li> <li><code>cookie_max_age</code> (<code>Optional[int]</code>): The lifetime of the cookie in seconds. <code>None</code> by default, which means it's a session cookie.</li> <li><code>cookie_path</code> (<code>/</code>): Cookie path.</li> <li><code>cookie_domain</code> (<code>None</code>): Cookie domain.</li> <li><code>cookie_secure</code> (<code>True</code>): Whether to only send the cookie to the server via SSL request.</li> <li><code>cookie_httponly</code> (<code>True</code>): Whether to prevent access to the cookie via JavaScript.</li> <li><code>cookie_samesite</code> (<code>lax</code>): A string that specifies the samesite strategy for the cookie. Valid values are <code>lax</code>, <code>strict</code> and <code>none</code>. Defaults to <code>lax</code>.</li> </ul>"},{"location":"configuration/authentication/transports/cookie/#login","title":"Login","text":"<p>This method will return a response with a valid <code>set-cookie</code> header upon successful login:</p> <p><code>204 No content</code></p> <p>Check documentation about login route.</p>"},{"location":"configuration/authentication/transports/cookie/#logout","title":"Logout","text":"<p>This method will remove the authentication cookie:</p> <p><code>204 No content</code></p> <p>Check documentation about logout route.</p>"},{"location":"configuration/authentication/transports/cookie/#authentication","title":"Authentication","text":"<p>This method expects that you provide a valid cookie in the headers.</p>"},{"location":"configuration/databases/beanie/","title":"Beanie","text":"<p>FastAPI Users provides the necessary tools to work with MongoDB databases using the Beanie ODM.</p>"},{"location":"configuration/databases/beanie/#setup-database-connection-and-collection","title":"Setup database connection and collection","text":"<p>The first thing to do is to create a MongoDB connection using mongodb/motor (automatically installed with Beanie).</p> <pre><code>import motor.motor_asyncio\nfrom beanie import Document\nfrom fastapi_users.db import BeanieBaseUser, BeanieUserDatabase\n\nDATABASE_URL = \"mongodb://localhost:27017\"\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\ndb = client[\"database_name\"]\n\n\nclass User(BeanieBaseUser, Document):\n    pass\n\n\nasync def get_user_db():\n    yield BeanieUserDatabase(User)\n</code></pre> <p>You can choose any name for the database.</p>"},{"location":"configuration/databases/beanie/#create-the-user-model","title":"Create the User model","text":"<p>As for any Beanie ODM model, we'll create a <code>User</code> model.</p> <pre><code>import motor.motor_asyncio\nfrom beanie import Document\nfrom fastapi_users.db import BeanieBaseUser, BeanieUserDatabase\n\nDATABASE_URL = \"mongodb://localhost:27017\"\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\ndb = client[\"database_name\"]\n\n\nclass User(BeanieBaseUser, Document):\n    pass\n\n\nasync def get_user_db():\n    yield BeanieUserDatabase(User)\n</code></pre> <p>As you can see, FastAPI Users provides a base class that will include base fields for our <code>User</code> table. You can of course add you own fields there to fit to your needs!</p> <p>Info</p> <p>The base class is configured to automatically create a unique index on <code>id</code> and <code>email</code>.</p> <p>Info</p> <p>If you want to add your own custom settings to your <code>User</code> document model - like changing the collection name - don't forget to let your inner <code>Settings</code> class inherit the pre-defined settings from <code>BeanieBaseUser</code> like this: <code>class Settings(BeanieBaseUser.Settings): # ...</code>! See Beanie's documentation on <code>Settings</code> for details.</p>"},{"location":"configuration/databases/beanie/#create-the-database-adapter","title":"Create the database adapter","text":"<p>The database adapter of FastAPI Users makes the link between your database configuration and the users logic. It should be generated by a FastAPI dependency.</p> <pre><code>import motor.motor_asyncio\nfrom beanie import Document\nfrom fastapi_users.db import BeanieBaseUser, BeanieUserDatabase\n\nDATABASE_URL = \"mongodb://localhost:27017\"\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\ndb = client[\"database_name\"]\n\n\nclass User(BeanieBaseUser, Document):\n    pass\n\n\nasync def get_user_db():\n    yield BeanieUserDatabase(User)\n</code></pre> <p>Notice that we pass a reference to the <code>User</code> model we defined above.</p>"},{"location":"configuration/databases/beanie/#initialize-beanie","title":"Initialize Beanie","text":"<p>When initializing your FastAPI app, it's important that you initialize Beanie so it can discover your models. We can achieve this using Lifespan Events on the FastAPI app:</p> <pre><code>from contextlib import asynccontextmanager\nfrom beanie import init_beanie\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await init_beanie(\n        database=db,  # (1)!\n        document_models=[\n            User,  # (2)!\n        ],\n    )\n    yield\n\napp = FastAPI(lifespan=lifespan)\n</code></pre> <ol> <li> <p>This is the <code>db</code> Motor database instance we defined above.</p> </li> <li> <p>This is the Beanie <code>User</code> model we defined above. Don't forget to also add your very own models!</p> </li> </ol>"},{"location":"configuration/databases/sqlalchemy/","title":"SQLAlchemy","text":"<p>FastAPI Users provides the necessary tools to work with SQL databases thanks to SQLAlchemy ORM with asyncio.</p>"},{"location":"configuration/databases/sqlalchemy/#asynchronous-driver","title":"Asynchronous driver","text":"<p>To work with your DBMS, you'll need to install the corresponding asyncio driver. The common choices are:</p> <ul> <li>For PostgreSQL: <code>pip install asyncpg</code></li> <li>For SQLite: <code>pip install aiosqlite</code></li> </ul> <p>Examples of <code>DB_URL</code>s are:</p> <ul> <li>PostgreSQL: <code>postgresql+asyncpg://user:password@host:port/name</code></li> <li>SQLite: <code>sqlite+aiosqlite:///name.db</code></li> </ul> <p>For the sake of this tutorial from now on, we'll use a simple SQLite database.</p> <p>Warning</p> <p>When using asynchronous sessions, ensure <code>Session.expire_on_commit</code> is set to <code>False</code> as recommended by the SQLAlchemy docs on asyncio. The examples on this documentation already have this setting correctly defined to <code>False</code> when using the <code>async_sessionmaker</code> factory.</p>"},{"location":"configuration/databases/sqlalchemy/#create-the-user-model","title":"Create the User model","text":"<p>As for any SQLAlchemy ORM model, we'll create a <code>User</code> model.</p> <pre><code>from collections.abc import AsyncGenerator\n\nfrom fastapi import Depends\nfrom fastapi_users.db import SQLAlchemyBaseUserTableUUID, SQLAlchemyUserDatabase\nfrom sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine\nfrom sqlalchemy.orm import DeclarativeBase\n\nDATABASE_URL = \"sqlite+aiosqlite:///./test.db\"\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(SQLAlchemyBaseUserTableUUID, Base):\n    pass\n\n\nengine = create_async_engine(DATABASE_URL)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\n\n\nasync def create_db_and_tables():\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n\nasync def get_async_session() -&gt; AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session\n\n\nasync def get_user_db(session: AsyncSession = Depends(get_async_session)):\n    yield SQLAlchemyUserDatabase(session, User)\n</code></pre> <p>As you can see, FastAPI Users provides a base class that will include base fields for our <code>User</code> table. You can of course add you own fields there to fit to your needs!</p> <p>Primary key is defined as UUID</p> <p>By default, we use UUID as a primary key ID for your user. If you want to use another type, like an auto-incremented integer, you can use <code>SQLAlchemyBaseUserTable</code> as base class and define your own <code>id</code> column.</p> <pre><code>class User(SQLAlchemyBaseUserTable[int], Base):\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n</code></pre> <p>Notice that <code>SQLAlchemyBaseUserTable</code> expects a generic type to define the actual type of ID you use.</p>"},{"location":"configuration/databases/sqlalchemy/#implement-a-function-to-create-the-tables","title":"Implement a function to create the tables","text":"<p>We'll now create an utility function to create all the defined tables.</p> <pre><code>from collections.abc import AsyncGenerator\n\nfrom fastapi import Depends\nfrom fastapi_users.db import SQLAlchemyBaseUserTableUUID, SQLAlchemyUserDatabase\nfrom sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine\nfrom sqlalchemy.orm import DeclarativeBase\n\nDATABASE_URL = \"sqlite+aiosqlite:///./test.db\"\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(SQLAlchemyBaseUserTableUUID, Base):\n    pass\n\n\nengine = create_async_engine(DATABASE_URL)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\n\n\nasync def create_db_and_tables():\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n\nasync def get_async_session() -&gt; AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session\n\n\nasync def get_user_db(session: AsyncSession = Depends(get_async_session)):\n    yield SQLAlchemyUserDatabase(session, User)\n</code></pre> <p>This function can be called, for example, during the initialization of your FastAPI app.</p> <p>Warning</p> <p>In production, it's strongly recommended to setup a migration system to update your SQL schemas. See Alembic.</p>"},{"location":"configuration/databases/sqlalchemy/#create-the-database-adapter-dependency","title":"Create the database adapter dependency","text":"<p>The database adapter of FastAPI Users makes the link between your database configuration and the users logic. It should be generated by a FastAPI dependency.</p> <pre><code>from collections.abc import AsyncGenerator\n\nfrom fastapi import Depends\nfrom fastapi_users.db import SQLAlchemyBaseUserTableUUID, SQLAlchemyUserDatabase\nfrom sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker, create_async_engine\nfrom sqlalchemy.orm import DeclarativeBase\n\nDATABASE_URL = \"sqlite+aiosqlite:///./test.db\"\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\nclass User(SQLAlchemyBaseUserTableUUID, Base):\n    pass\n\n\nengine = create_async_engine(DATABASE_URL)\nasync_session_maker = async_sessionmaker(engine, expire_on_commit=False)\n\n\nasync def create_db_and_tables():\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n\nasync def get_async_session() -&gt; AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session\n\n\nasync def get_user_db(session: AsyncSession = Depends(get_async_session)):\n    yield SQLAlchemyUserDatabase(session, User)\n</code></pre> <p>Notice that we define first a <code>get_async_session</code> dependency returning us a fresh SQLAlchemy session to interact with the database.</p> <p>It's then used inside the <code>get_user_db</code> dependency to generate our adapter. Notice that we pass it two things:</p> <ul> <li>The <code>session</code> instance we just injected.</li> <li>The <code>User</code> class, which is the actual SQLAlchemy model.</li> </ul>"},{"location":"configuration/routers/","title":"Routers","text":"<p>We're almost there! The last step is to configure the <code>FastAPIUsers</code> object that will wire the user manager, the authentication classes and let us generate the actual API routes.</p>"},{"location":"configuration/routers/#configure-fastapiusers","title":"Configure <code>FastAPIUsers</code>","text":"<p>Configure <code>FastAPIUsers</code> object with the elements we defined before. More precisely:</p> <ul> <li><code>get_user_manager</code>: Dependency callable getter to inject the     user manager class instance. See UserManager.</li> <li><code>auth_backends</code>: List of authentication backends. See Authentication.</li> </ul> <pre><code>import uuid\n\nfrom fastapi_users import FastAPIUsers\n\nfrom .db import User\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n</code></pre> <p>Typing: User and ID generic types are expected</p> <p>You can see that we define two generic types when instantiating:</p> <ul> <li><code>User</code>, which is the user model we defined in the database part</li> <li>The ID, which should correspond to the type of ID you use on your model. Here, we chose UUID, but it can be anything, like an integer or a MongoDB ObjectID.</li> </ul> <p>It'll help you to have good type-checking and auto-completion.</p>"},{"location":"configuration/routers/#available-routers","title":"Available routers","text":"<p>This helper class will let you generate useful routers to setup the authentication system. Each of them is optional, so you can pick only the one that you are interested in! Here are the routers provided:</p> <ul> <li>Auth router: Provides <code>/login</code> and <code>/logout</code> routes for a given authentication backend.</li> <li>Register router: Provides <code>/register</code> routes to allow a user to create a new account.</li> <li>Reset password router: Provides <code>/forgot-password</code> and <code>/reset-password</code> routes to allow a user to reset its password.</li> <li>Verify router: Provides <code>/request-verify-token</code> and <code>/verify</code> routes to manage user e-mail verification.</li> <li>Users router: Provides routes to manage users.</li> <li>OAuth router: Provides routes to perform an OAuth authentication against a service provider (like Google or Facebook).</li> </ul> <p>You should check out each of them to understand how to use them.</p>"},{"location":"configuration/routers/auth/","title":"Auth router","text":"<p>The auth router will generate <code>/login</code> and <code>/logout</code> routes for a given authentication backend.</p> <p>Check the routes usage to learn how to use them.</p>"},{"location":"configuration/routers/auth/#setup","title":"Setup","text":"<pre><code>import uuid\n\nfrom fastapi import FastAPI\nfrom fastapi_users import FastAPIUsers\n\nfrom .db import User\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n\napp = FastAPI()\napp.include_router(\n    fastapi_users.get_auth_router(auth_backend),\n    prefix=\"/auth/jwt\",\n    tags=[\"auth\"],\n)\n</code></pre>"},{"location":"configuration/routers/auth/#optional-user-verification","title":"Optional: user verification","text":"<p>You can require the user to be verified (i.e. <code>is_verified</code> property set to <code>True</code>) to allow login. You have to set the <code>requires_verification</code> parameter to <code>True</code> on the router instantiation method:</p> <pre><code>app.include_router(\n    fastapi_users.get_auth_router(auth_backend, requires_verification=True),\n    prefix=\"/auth/jwt\",\n    tags=[\"auth\"],\n)\n</code></pre>"},{"location":"configuration/routers/register/","title":"Register routes","text":"<p>The register router will generate a <code>/register</code> route to allow a user to create a new account.</p> <p>Check the routes usage to learn how to use them.</p>"},{"location":"configuration/routers/register/#setup","title":"Setup","text":"<pre><code>import uuid\n\nfrom fastapi import FastAPI\nfrom fastapi_users import FastAPIUsers\n\nfrom .db import User\nfrom .schemas import UserCreate, UserRead\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n\napp = FastAPI()\napp.include_router(\n    fastapi_users.get_register_router(UserRead, UserCreate),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\n</code></pre>"},{"location":"configuration/routers/reset/","title":"Reset password router","text":"<p>The reset password router will generate <code>/forgot-password</code> (the user asks for a token to reset its password) and <code>/reset-password</code> (the user changes its password given the token) routes.</p> <p>Check the routes usage to learn how to use them.</p>"},{"location":"configuration/routers/reset/#setup","title":"Setup","text":"<pre><code>import uuid\n\nfrom fastapi import FastAPI\nfrom fastapi_users import FastAPIUsers\n\nfrom .db import User\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n\napp = FastAPI()\napp.include_router(\n    fastapi_users.get_reset_password_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\n</code></pre>"},{"location":"configuration/routers/users/","title":"Users router","text":"<p>This router provides routes to manage users. Check the routes usage to learn how to use them.</p>"},{"location":"configuration/routers/users/#setup","title":"Setup","text":"<pre><code>import uuid\n\nfrom fastapi import FastAPI\nfrom fastapi_users import FastAPIUsers\n\nfrom .db import User\nfrom .schemas import UserRead, UserUpdate\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n\napp = FastAPI()\napp.include_router(\n    fastapi_users.get_users_router(UserRead, UserUpdate),\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n</code></pre>"},{"location":"configuration/routers/users/#optional-user-verification","title":"Optional: user verification","text":"<p>You can require the user to be verified (i.e. <code>is_verified</code> property set to <code>True</code>) to access those routes. You have to set the <code>requires_verification</code> parameter to <code>True</code> on the router instantiation method:</p> <pre><code>app.include_router(\n    fastapi_users.get_users_router(UserRead, UserUpdate, requires_verification=True),\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n</code></pre>"},{"location":"configuration/routers/verify/","title":"Verify router","text":"<p>This router provides routes to manage user email verification. Check the routes usage to learn how to use them.</p> <p>\ud83d\udc4f\ud83d\udc4f\ud83d\udc4f</p> <p>A big thank you to Edd Salkield and Mark Todd who worked hard on this feature!</p>"},{"location":"configuration/routers/verify/#setup","title":"Setup","text":"<pre><code>import uuid\n\nfrom fastapi import FastAPI\nfrom fastapi_users import FastAPIUsers\n\nfrom .db import User\nfrom .schemas import UserRead\n\nfastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n\napp = FastAPI()\napp.include_router(\n    fastapi_users.get_verify_router(UserRead),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\n</code></pre>"},{"location":"cookbook/create-user-programmatically/","title":"Create a user programmatically","text":"<p>Sometimes, you'll need to create a user programmatically in the code rather than passing by the REST API endpoint. To do this, we'll create a function that you can call from your code.</p> <p>In this context, we are outside the dependency injection mechanism of FastAPI, so we have to take care of instantiating the <code>UserManager</code> class and all other dependent objects manually.</p> <p>For this cookbook, we'll consider you are starting from the SQLAlchemy full example, but it'll be rather similar for other DBMS.</p>"},{"location":"cookbook/create-user-programmatically/#1-define-dependencies-as-context-managers","title":"1. Define dependencies as context managers","text":"<p>Generally, FastAPI dependencies are defined as generators, using the <code>yield</code> keyword. FastAPI knows very well to handle them inside its dependency injection system. For example, here is the definition of the <code>get_user_manager</code> dependency:</p> <pre><code>async def get_user_manager(user_db: SQLAlchemyUserDatabase = Depends(get_user_db)):\n  yield UserManager(user_db)\n</code></pre> <p>In Python, when we want to use a generator, we have to use a <code>for</code> loop, which would be a bit unnatural in this context since we have only one value to get, the user manager instance. To avoid this, we'll transform them into context managers, so we can call them using the <code>with..as</code> syntax. Fortunately, the standard library provides tools to automatically transform generators into context managers.</p> <p>In the following sample, we import our dependencies and create a context manager version using <code>contextlib.asynccontextmanager</code>:</p> <pre><code>import contextlib\n\nfrom app.db import get_async_session, get_user_db\nfrom app.schemas import UserCreate\nfrom app.users import get_user_manager\nfrom fastapi_users.exceptions import UserAlreadyExists\n\nget_async_session_context = contextlib.asynccontextmanager(get_async_session)\nget_user_db_context = contextlib.asynccontextmanager(get_user_db)\nget_user_manager_context = contextlib.asynccontextmanager(get_user_manager)\n\n\nasync def create_user(email: str, password: str, is_superuser: bool = False):\n    try:\n        async with get_async_session_context() as session:\n            async with get_user_db_context(session) as user_db:\n                async with get_user_manager_context(user_db) as user_manager:\n                    user = await user_manager.create(\n                        UserCreate(\n                            email=email, password=password, is_superuser=is_superuser\n                        )\n                    )\n                    print(f\"User created {user}\")\n                    return user\n    except UserAlreadyExists:\n        print(f\"User {email} already exists\")\n        raise\n</code></pre> <p>I have other dependencies</p> <p>Since FastAPI Users fully embraces dependency injection, you may have more arguments passed to your database or user manager dependencies. It's important then to not forget anyone. Once again, outside the dependency injection system, you are responsible of instantiating everything yourself.</p>"},{"location":"cookbook/create-user-programmatically/#2-write-a-function","title":"2. Write a function","text":"<p>We are now ready to write a function. The example below shows you a basic example but you can of course adapt it to your own needs. The key part here is once again to take care of opening every context managers and pass them every required arguments, as the dependency manager would do.</p> <pre><code>import contextlib\n\nfrom app.db import get_async_session, get_user_db\nfrom app.schemas import UserCreate\nfrom app.users import get_user_manager\nfrom fastapi_users.exceptions import UserAlreadyExists\n\nget_async_session_context = contextlib.asynccontextmanager(get_async_session)\nget_user_db_context = contextlib.asynccontextmanager(get_user_db)\nget_user_manager_context = contextlib.asynccontextmanager(get_user_manager)\n\n\nasync def create_user(email: str, password: str, is_superuser: bool = False):\n    try:\n        async with get_async_session_context() as session:\n            async with get_user_db_context(session) as user_db:\n                async with get_user_manager_context(user_db) as user_manager:\n                    user = await user_manager.create(\n                        UserCreate(\n                            email=email, password=password, is_superuser=is_superuser\n                        )\n                    )\n                    print(f\"User created {user}\")\n                    return user\n    except UserAlreadyExists:\n        print(f\"User {email} already exists\")\n        raise\n</code></pre>"},{"location":"cookbook/create-user-programmatically/#3-use-it","title":"3. Use it","text":"<p>You can now easily use it in a script. For example:</p> <pre><code>import asyncio\n\nif __name__ == \"__main__\":\n  asyncio.run(create_user(\"king.arthur@camelot.bt\", \"guinevere\"))\n</code></pre>"},{"location":"migration/08_to_1x/","title":"0.8.x \u27a1\ufe0f 1.x.x","text":"<p>1.0 version introduces major breaking changes that need you to update some of your code and migrate your data.</p>"},{"location":"migration/08_to_1x/#id-are-uuid","title":"Id. are UUID","text":"<p>Users and OAuth accounts id. are now represented as real UUID objects instead of plain strings.  This change was introduced to leverage efficient storage and indexing for DBMS that supports UUID (especially PostgreSQL and Mongo).</p>"},{"location":"migration/08_to_1x/#in-python-code","title":"In Python code","text":"<p>If you were doing comparison betwen a user id. and a string (in unit tests for example), you should now cast the id. to string:</p> <pre><code># Before\nassert \"d35d213e-f3d8-4f08-954a-7e0d1bea286f\" == user.id\n\n# Now\nassert \"d35d213e-f3d8-4f08-954a-7e0d1bea286f\" == str(user.id)\n</code></pre> <p>If you were refering to user id. in your Pydantic models, the field should now be of <code>UUID4</code> type instead of <code>str</code>:</p> <pre><code>from pydantic import BaseModel, UUID4\n\n# Before\nclass Model(BaseModel):\n    user_id: str\n\n# After\nclass Model(BaseModel):\n    user_id: UUID4\n</code></pre>"},{"location":"migration/08_to_1x/#mongodb","title":"MongoDB","text":"<p>To avoid any issues, it's recommended to use the <code>standard</code> UUID representation when instantiating the MongoDB client:</p> <pre><code>DATABASE_URL = \"mongodb://localhost:27017\"\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\n</code></pre> <p>This parameter controls how the UUID values will be encoded in the database. By default, it's set to <code>pythonLegacy</code> but new applications should consider setting this to <code>standard</code> for cross language compatibility. Read more about this.</p>"},{"location":"migration/08_to_1x/#in-database","title":"In database","text":"<p>Id. were before stored as strings in the database. You should make a migration to convert string data to UUID data.</p> <p>Danger</p> <p>Scripts below are provided as guidelines. Please review them carefully, adapt them and check that they are working on a test database before applying them to production. BE CAREFUL. THEY CAN DESTROY YOUR DATA..</p>"},{"location":"migration/08_to_1x/#postgresql","title":"PostgreSQL","text":"<p>PostgreSQL supports UUID type. If not already, you should enable the <code>uuid-ossp</code> extension:</p> <pre><code>CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n</code></pre> <p>To convert the existing id. string column, we can:</p> <ol> <li>Create a new column with UUID type.</li> <li>Fill it with the id. converted to UUID.</li> <li>Drop the original id. column.</li> <li>Make the new column a primary key and rename it.</li> </ol> <pre><code>ALTER TABLE \"user\" ADD uuid_id UUID;\nUPDATE \"user\" SET uuid_id = uuid(id);\nALTER TABLE \"user\" DROP id;\nALTER TABLE \"user\" ADD PRIMARY KEY (uuid_id);\nALTER TABLE \"user\" RENAME COLUMN uuid_id TO id;\n</code></pre>"},{"location":"migration/08_to_1x/#mysql","title":"MySQL","text":"<p>MySQL doesn't support UUID type. We'll just convert the column to <code>CHAR(36)</code> type:</p> <pre><code>ALTER TABLE \"user\" MODIFY id CHAR(36);\n</code></pre>"},{"location":"migration/08_to_1x/#mongodb_1","title":"MongoDB","text":""},{"location":"migration/08_to_1x/#mongo-shell","title":"Mongo shell","text":"<p>For MongoDB, we can use a <code>forEach</code> iterator to convert the id. for each document:</p> <pre><code>db.getCollection('users').find().forEach(function(user) {\n  var uuid = UUID(user.id);\n  db.getCollection('users').update({_id: user._id}, [{$set: {id: uuid}}]);\n});\n</code></pre>"},{"location":"migration/08_to_1x/#python","title":"Python","text":"<pre><code>import uuid\n\nimport motor.motor_asyncio\n\n\nasync def migrate_uuid():\n    client = motor.motor_asyncio.AsyncIOMotorClient(\n        DATABASE_URL, uuidRepresentation=\"standard\"\n    )\n    db = client[\"database_name\"]\n    users = db[\"users\"]\n\n    async for user in users.find({}):\n        await users.update_one(\n            {\"_id\": user[\"_id\"]},\n            {\"$set\": {\"id\": uuid.UUID(user[\"id\"])}},\n        )\n</code></pre>"},{"location":"migration/08_to_1x/#splitted-routers","title":"Splitted routers","text":"<p>You now have the responsibility to wire the routers. FastAPI Users doesn't give a bloated users router anymore.</p> <p>Event handlers are also removed. You have to provide your \"after-\" logic as a parameter of the router generator.</p>"},{"location":"migration/08_to_1x/#before","title":"Before","text":"<pre><code>jwt_authentication = JWTAuthentication(secret=SECRET, lifetime_seconds=3600)\n\napp = FastAPI()\nfastapi_users = FastAPIUsers(\n    user_db, [jwt_authentication], User, UserCreate, UserUpdate, UserDB,\n)\napp.include_router(fastapi_users.router, prefix=\"/users\", tags=[\"users\"])\n\n\n@fastapi_users.on_after_register()\ndef on_after_register(user: User, request: Request):\n    print(f\"User {user.id} has registered.\")\n\n\n@fastapi_users.on_after_forgot_password()\ndef on_after_forgot_password(user: User, token: str, request: Request):\n    print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n</code></pre>"},{"location":"migration/08_to_1x/#after","title":"After","text":"<pre><code>def on_after_register(user: UserDB, request: Request):\n    print(f\"User {user.id} has registered.\")\n\n\ndef on_after_forgot_password(user: UserDB, token: str, request: Request):\n    print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n\n\njwt_authentication = JWTAuthentication(secret=SECRET, lifetime_seconds=3600)\n\napp = FastAPI()\nfastapi_users = FastAPIUsers(\n    user_db, [jwt_authentication], User, UserCreate, UserUpdate, UserDB,\n)\napp.include_router(\n    fastapi_users.get_auth_router(jwt_authentication), prefix=\"/auth/jwt\", tags=[\"auth\"]\n)\napp.include_router(\n    fastapi_users.get_register_router(on_after_register), prefix=\"/auth\", tags=[\"auth\"]\n)\napp.include_router(\n    fastapi_users.get_reset_password_router(\n        SECRET, after_forgot_password=on_after_forgot_password\n    ),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(fastapi_users.get_users_router(), prefix=\"/users\", tags=[\"users\"])\n</code></pre> <p>Important things to notice:</p> <ul> <li><code>FastAPIUsers</code> takes two arguments less (<code>reset_password_token_secret</code> and <code>reset_password_token_lifetime_seconds</code>).</li> <li>You have more flexibility to choose the prefix and tags of the routers.</li> <li>The <code>/login</code>/<code>/logout</code> are now your responsibility to include for each backend. The path will change (before <code>/login/jwt</code>, after <code>/jwt/login</code>).</li> <li>If you don't care about some of those routers, you can discard them.</li> </ul>"},{"location":"migration/1x_to_2x/","title":"1.x.x \u27a1\ufe0f 2.x.x","text":""},{"location":"migration/1x_to_2x/#jwt-authentication-backend","title":"JWT authentication backend","text":"<p>To be fully compatible with Swagger authentication, the output of a successful login operation with the JWT authentication backend has changed:</p> <p>Before</p> <pre><code>{\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI\"\n}\n</code></pre> <p>After</p> <pre><code>{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI\",\n    \"token_type\": \"bearer\"\n}\n</code></pre> <p>Make sure to update your clients to read the token in the right property.</p>"},{"location":"migration/2x_to_3x/","title":"2.x.x \u27a1\ufe0f 3.x.x","text":""},{"location":"migration/2x_to_3x/#emails-are-now-case-insensitive","title":"Emails are now case-insensitive","text":"<p>Before 3.x.x, the local part (before the @) of the email address was case-sensitive. Therefore, <code>king.arthur@camelot.bt</code> and <code>King.Arthur@camelot.bt</code> were considered as two different users. This behaviour was a bit confusing and not consistent with 99% of web services out there.</p> <p>After 3.x.x, users are fetched from the database with a case-insensitive email search. Bear in mind though that if the user registers with the email <code>King.Arthur@camelot.bt</code>, it will be stored exactly like this in the database (with casing) ; but he will be able to login as <code>king.arthur@camelot.bt</code>.</p> <p>Danger</p> <p>It's super important then, before you upgrade to 3.x.x that you check if there are several users with the same email with different cases ; and that you merge or delete those accounts.</p>"},{"location":"migration/3x_to_4x/","title":"3.x.x \u27a1\ufe0f 4.x.x","text":""},{"location":"migration/3x_to_4x/#expires_at-property-in-oauthaccount-is-now-optional","title":"<code>expires_at</code> property in <code>OAuthAccount</code> is now optional","text":"<p>Before 4.x.x, the <code>expires_at</code> property in <code>OAuthAccount</code> model was mandatory. It was causing issues with some services that don't have such expiration property.</p> <p>If you use SQLAlchemy or Tortoise databases adapters, you'll have to make a migration to update your database schema.</p>"},{"location":"migration/4x_to_5x/","title":"4.x.x \u27a1\ufe0f 5.x.x","text":""},{"location":"migration/4x_to_5x/#new-property-is_verified-in-user-model","title":"New property <code>is_verified</code> in <code>User</code> model.","text":"<p>Starting 5.x.x., there is a new e-mail verification feature. Even if optional, the <code>is_verified</code> property has been added to the <code>User</code> model.</p> <p>If you use SQLAlchemy or Tortoise databases adapters, you'll have to make a migration to update your database schema.</p>"},{"location":"migration/6x_to_7x/","title":"6.x.x \u27a1\ufe0f 7.x.x","text":"<ul> <li>The deprecated dependencies to retrieve current user have been removed. Use the <code>current_user</code> factory instead. [Documentation]</li> <li>When trying to authenticate a not verified user, a status code 403 is raised instead of status code 401. Thanks @daanbeverdam \ud83c\udf89 [Documentation]</li> <li>Your <code>UserUpdate</code> model shouldn't inherit from the base <code>User</code> class. If you have custom fields, you should repeat them in this model. [Documentation]</li> </ul> <ul> <li>Database adapters now live in their own repositories and packages.</li> <li>When upgrading to v7.0.0, the dependency for your database adapter should automatically be installed.</li> <li>The <code>import</code> statements remain unchanged.</li> </ul>"},{"location":"migration/7x_to_8x/","title":"7.x.x \u27a1\ufe0f 8.x.x","text":"<p>Version 8 includes the biggest code changes since version 1. We reorganized lot of parts of the code to make it even more modular and integrate more into the dependency injection system of FastAPI.</p> <p>Most importantly, you need now to implement a <code>UserManager</code> class and a associated dependency to create an instance of this class.</p>"},{"location":"migration/7x_to_8x/#event-handlers-should-live-in-the-usermanager","title":"Event handlers should live in the <code>UserManager</code>","text":"<p>Before, event handlers like <code>on_after_register</code> or <code>on_after_forgot_password</code> were defined in their own functions that were passed as arguments of router generators.</p> <p>Now, they should be methods of the <code>UserManager</code> class.</p> <p>You can read more in the <code>UserManager</code> documentation.</p>"},{"location":"migration/7x_to_8x/#password-validation-should-live-in-the-usermanager","title":"Password validation should live in the <code>UserManager</code>","text":"<p>Before, password validation was defined in its own function that was passed as argument of <code>FastAPIUsers</code>.</p> <p>Now, it should be a method of the <code>UserManager</code> class.</p> <p>You can read more in the <code>UserManager</code> documentation.</p>"},{"location":"migration/7x_to_8x/#verify-token-secret-and-lifetime-parameters-are-attributes-of-usermanager","title":"Verify token secret and lifetime parameters are attributes of <code>UserManager</code>","text":"<p>Before, verify token and lifetime parameters were passed as argument of <code>get_verify_router</code>.</p> <p>Now, they should be defined as attributes of the <code>UserManager</code> class.</p> <p>You can read more in the <code>UserManager</code> documentation.</p>"},{"location":"migration/7x_to_8x/#reset-password-token-secret-and-lifetime-parameters-are-attributes-of-usermanager","title":"Reset password token secret and lifetime parameters are attributes of <code>UserManager</code>","text":"<p>Before, reset password token and lifetime parameters were passed as argument of <code>get_verify_router</code>.</p> <p>Now, they should be defined as attributes of the <code>UserManager</code> class.</p> <p>You can read more in the <code>UserManager</code> documentation.</p>"},{"location":"migration/7x_to_8x/#database-adapter-should-be-provided-in-a-dependency","title":"Database adapter should be provided in a dependency","text":"<p>Before, we advised to directly instantiate the database adapter class.</p> <p>Now, it should be instantiated inside a dependency that you define yourself. The benefit of this is that it lives in the dependency injection system of FastAPI, allowing you to have more dynamic logic to create your instance.</p> <p>\u27a1\ufe0f I'm using SQLAlchemy</p> <p>\u27a1\ufe0f I'm using MongoDB</p> <p>\u27a1\ufe0f I'm using Tortoise ORM</p> <p>\u27a1\ufe0f I'm using ormar</p>"},{"location":"migration/7x_to_8x/#fastapiusers-now-expect-a-get_user_manager-dependency","title":"FastAPIUsers now expect a <code>get_user_manager</code> dependency","text":"<p>Before, the database adapter instance was passed as argument of <code>FastAPIUsers</code>.</p> <p>Now, you should define a <code>get_user_manager</code> dependency returning an instance of your <code>UserManager</code> class. This dependency will be dependent of the database adapter dependency.</p> <p>You can read more in the <code>UserManager</code> documentation and <code>FastAPIUsers</code> documentation</p>"},{"location":"migration/7x_to_8x/#lost","title":"Lost?","text":"<p>If you're unsure or a bit lost, make sure to check the full working examples.</p>"},{"location":"migration/8x_to_9x/","title":"8.x.x \u27a1\ufe0f 9.x.x","text":"<p>Version 9 revamps the authentication backends: we splitted the logic of a backend into two: the transport, which is how the token will be carried over the request and the strategy, which is how the token is generated and secured.</p> <p>The benefit of this is that we'll soon be able to propose new strategies, like database session tokens, without having to repeat the transport logic which remains the same.</p>"},{"location":"migration/8x_to_9x/#convert-the-authentication-backend","title":"Convert the authentication backend","text":"<p>You now have to generate an authentication backend with a transport and a strategy.</p>"},{"location":"migration/8x_to_9x/#i-used-jwtauthentication","title":"I used JWTAuthentication","text":"BeforeAfter <pre><code>from fastapi_users.authentication import JWTAuthentication\n\njwt_authentication = JWTAuthentication(\n    secret=SECRET, lifetime_seconds=3600, tokenUrl=\"auth/jwt/login\"\n)\n</code></pre> <pre><code>from fastapi_users.authentication import AuthenticationBackend, BearerTransport, JWTStrategy\n\nSECRET = \"SECRET\"\n\nbearer_transport = BearerTransport(tokenUrl=\"auth/jwt/login\")\n\ndef get_jwt_strategy() -&gt; JWTStrategy:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n\nauth_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=bearer_transport,\n    get_strategy=get_jwt_strategy,\n)\n</code></pre> <p>Warning</p> <p>There is no default <code>name</code> anymore: you need to provide it yourself for each of your backends.</p>"},{"location":"migration/8x_to_9x/#i-used-cookieauthentication","title":"I used CookieAuthentication","text":"BeforeAfter <pre><code>from fastapi_users.authentication import CookieAuthentication\n\ncookie_authentication = CookieAuthentication(secret=SECRET, lifetime_seconds=3600)\n</code></pre> <pre><code>from fastapi_users.authentication import AuthenticationBackend, CookieTransport, JWTStrategy\n\nSECRET = \"SECRET\"\n\ncookie_transport = CookieTransport(cookie_max_age=3600)\n\ndef get_jwt_strategy() -&gt; JWTStrategy:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n\nauth_backend = AuthenticationBackend(\n    name=\"cookie\",\n    transport=cookie_transport,\n    get_strategy=get_jwt_strategy,\n)\n</code></pre> <p>Warning</p> <p>There is no default <code>name</code> anymore: you need to provide it yourself for each of your backends.</p> <p>Tip</p> <p>Notice that the strategy is the same for both authentication backends. That's the beauty of this approach: the token generation is decoupled from its transport.</p>"},{"location":"migration/8x_to_9x/#oauth-one-router-for-each-backend","title":"OAuth: one router for each backend","text":"<p>Before, a single OAuth router was enough to login with any of your authentication backend. Now, you need to generate a router for each of your backends.</p> BeforeAfter <pre><code>app.include_router(\n    fastapi_users.get_oauth_router(google_oauth_client, \"SECRET\"),\n    prefix=\"/auth/google\",\n    tags=[\"auth\"],\n)\n</code></pre> <pre><code>app.include_router(\n    fastapi_users.get_oauth_router(google_oauth_client, auth_backend, \"SECRET\"),\n    prefix=\"/auth/google\",\n    tags=[\"auth\"],\n)\n</code></pre>"},{"location":"migration/8x_to_9x/#authentication_backend-is-not-needed-on-authorize","title":"<code>authentication_backend</code> is not needed on <code>/authorize</code>","text":"<p>The consequence of this is that you don't need to specify the authentication backend when making a request to <code>/authorize</code>.</p> BeforeAfter <pre><code>curl \\\n-H \"Content-Type: application/json\" \\\n-X GET \\\nhttp://localhost:8000/auth/google/authorize?authentication_backend=jwt\n</code></pre> <pre><code>curl \\\n-H \"Content-Type: application/json\" \\\n-X GET \\\nhttp://localhost:8000/auth/google/authorize\n</code></pre>"},{"location":"migration/8x_to_9x/#lost","title":"Lost?","text":"<p>If you're unsure or a bit lost, make sure to check the full working examples.</p>"},{"location":"migration/9x_to_10x/","title":"9.x.x \u27a1\ufe0f 10.x.x","text":"<p>Version 10 marks important changes in how we manage User models and their ID.</p> <p>Before, we were relying only on Pydantic models to work with users. In particular the <code>current_user</code> dependency would return you an instance of <code>UserDB</code>, a Pydantic model. This proved to be quite problematic with some ORM if you ever needed to retrieve relationship data or make specific requests.</p> <p>Now, FastAPI Users is designed to always return you a native object for your ORM model, whether it's an SQLAlchemy model or a Beanie document. Pydantic models are now only used for validation and serialization inside the API.</p> <p>Before, we were forcing the use of UUID as primary key ID; a consequence of the design above. This proved to be quite problematic on some databases, like MongoDB which uses a special ObjectID format by default. Some SQL folks also prefer to use traditional auto-increment integers.</p> <p>Now, FastAPI Users is designed to use generic ID type. It means that you can use any type you want for your user's ID. By default, SQLAlchemy adapter still use UUID; but you can quite easily switch to another thing, like an integer. Beanie adapter for MongoDB will use native ObjectID by default, but it also can be overriden.</p> <p>As you may have guessed, those changes imply quite a lot of breaking changes.</p>"},{"location":"migration/9x_to_10x/#user-models-and-database-adapter","title":"User models and database adapter","text":""},{"location":"migration/9x_to_10x/#sqlalchemy-orm","title":"SQLAlchemy ORM","text":"<p>We've removed the old SQLAlchemy dependency support, so the dependency is now <code>fastapi-users[sqlalchemy]</code>.</p> BeforeAfter <pre><code>fastapi\nfastapi-users[sqlalchemy2]\nuvicorn[standard]\naiosqlite\n</code></pre> <pre><code>fastapi\nfastapi-users[sqlalchemy]\nuvicorn[standard]\naiosqlite\n</code></pre> <p>The User model base class for SQLAlchemy slightly changed to support UUID by default.</p> <p>We changed the name of the class from <code>UserTable</code> to <code>User</code>: it's not a compulsory change, but since there is no risk of confusion with Pydantic models anymore, it's probably a more idiomatic naming.</p> BeforeAfter <pre><code>class UserTable(Base, SQLAlchemyBaseUserTable):\n    pass\n</code></pre> <pre><code>class User(SQLAlchemyBaseUserTableUUID, Base):\n    pass\n</code></pre> <p>Instantiating the <code>SQLAlchemyUserDatabase</code> adapter now only expects this <code>User</code> model. <code>UserDB</code> is removed.</p> BeforeAfter <pre><code>async def get_user_db(session: AsyncSession = Depends(get_async_session)):\n    yield SQLAlchemyUserDatabase(UserDB, session, UserTable)\n</code></pre> <pre><code>async def get_user_db(session: AsyncSession = Depends(get_async_session)):\n    yield SQLAlchemyUserDatabase(session, User)\n</code></pre>"},{"location":"migration/9x_to_10x/#mongodb","title":"MongoDB","text":"<p>MongoDB support is now only provided through Beanie ODM. Even if you don't use it for the rest of your project, it's a very light addition that shouldn't interfere much.</p> BeforeAfter <pre><code>fastapi\nfastapi-users[mongodb]\nuvicorn[standard]\naiosqlite\n</code></pre> <pre><code>fastapi\nfastapi-users[beanie]\nuvicorn[standard]\naiosqlite\n</code></pre> <p>You now need to define a proper User model using Beanie.</p> BeforeAfter <pre><code>import os\n\nimport motor.motor_asyncio\nfrom fastapi_users.db import MongoDBUserDatabase\n\nfrom app.models import UserDB\n\nDATABASE_URL = os.environ[\"DATABASE_URL\"]\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\ndb = client[\"database_name\"]\ncollection = db[\"users\"]\n\n\nasync def get_user_db():\n    yield MongoDBUserDatabase(UserDB, collection)\n</code></pre> <pre><code>import motor.motor_asyncio\nfrom beanie import PydanticObjectId\nfrom fastapi_users.db import BeanieBaseUser, BeanieUserDatabase\n\nDATABASE_URL = \"mongodb://localhost:27017\"\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    DATABASE_URL, uuidRepresentation=\"standard\"\n)\ndb = client[\"database_name\"]\n\n\nclass User(BeanieBaseUser[PydanticObjectId]):\n    pass\n\n\nasync def get_user_db():\n    yield BeanieUserDatabase(User)\n</code></pre> <p>ID are now ObjectID by default</p> <p>By default, User ID will now be native MongoDB ObjectID. If you don't want to make the transition and keep UUID you can do so by overriding the <code>id</code> field:</p> <pre><code>import uuid\n\nfrom pydantic import Field\n\n\nclass User(BeanieBaseUser[uuid.UUID]):\n    id: uuid.UUID = Field(default_factory=uuid.uuid4)\n</code></pre> <p>Beanie also needs to be initialized in a startup event handler of your FastAPI app:</p> <pre><code>from beanie import init_beanie\n\n\n@app.on_event(\"startup\")\nasync def on_startup():\n    await init_beanie(\n        database=db,\n        document_models=[\n            User,\n        ],\n    )\n</code></pre>"},{"location":"migration/9x_to_10x/#tortoise-orm-and-ormar","title":"Tortoise ORM and ormar","text":"<p>Unfortunately, we sometimes need to make difficult choices to keep things sustainable. That's why we decided to not support Tortoise ORM and ormar anymore. It appeared they were not widely used.</p> <p>You can still add support for those ORM yourself by implementing the necessary adapter. You can take inspiration from the SQLAlchemy one.</p>"},{"location":"migration/9x_to_10x/#usermanager","title":"<code>UserManager</code>","text":"<p>There is some slight changes on the <code>UserManager</code> class. In particular, it now needs a <code>parse_id</code> method that can be provided through built-in mixins.</p> <p>Generic typing now expects your native User model class and the type of ID.</p> <p>The <code>user_db_model</code> class property is removed.</p> BeforeAfter <pre><code>class UserManager(BaseUserManager[UserCreate, UserDB]):\n    user_db_model = UserDB\n    reset_password_token_secret = SECRET\n    verification_token_secret = SECRET\n\n    async def on_after_register(self, user: UserDB, request: Optional[Request] = None):\n        print(f\"User {user.id} has registered.\")\n\n    async def on_after_forgot_password(\n        self, user: UserDB, token: str, request: Optional[Request] = None\n    ):\n        print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n\n    async def on_after_request_verify(\n        self, user: UserDB, token: str, request: Optional[Request] = None\n    ):\n        print(f\"Verification requested for user {user.id}. Verification token: {token}\")\n</code></pre> <pre><code>class UserManager(UUIDIDMixin, BaseUserManager[User, uuid.UUID]):\n    reset_password_token_secret = SECRET\n    verification_token_secret = SECRET\n\n    async def on_after_register(self, user: User, request: Optional[Request] = None):\n        print(f\"User {user.id} has registered.\")\n\n    async def on_after_forgot_password(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"User {user.id} has forgot their password. Reset token: {token}\")\n\n    async def on_after_request_verify(\n        self, user: User, token: str, request: Optional[Request] = None\n    ):\n        print(f\"Verification requested for user {user.id}. Verification token: {token}\")\n</code></pre> <p>If you need to support other types of ID, you can read more about it in the dedicated section.</p>"},{"location":"migration/9x_to_10x/#pydantic-models","title":"Pydantic models","text":"<p>To better distinguish them from the ORM models, Pydantic models are now called schemas.</p> <p><code>UserDB</code> has been removed in favor of native models.</p> <p>We changed the name of <code>User</code> to <code>UserRead</code>: it's not a compulsory change, but since there is a risk of confusion with the native model, it's highly recommended.</p> <p>Besides, the <code>BaseUser</code> schema now accepts a generic type to specify the type of ID you use.</p> BeforeAfter <pre><code>from fastapi_users import models\n\n\nclass User(models.BaseUser):\n    pass\n\n\nclass UserCreate(models.BaseUserCreate):\n    pass\n\n\nclass UserUpdate(models.BaseUserUpdate):\n    pass\n\n\nclass UserDB(User, models.BaseUserDB):\n    pass\n</code></pre> <pre><code>import uuid\n\nfrom fastapi_users import schemas\n\n\nclass UserRead(schemas.BaseUser[uuid.UUID]):\n    pass\n\n\nclass UserCreate(schemas.BaseUserCreate):\n    pass\n\n\nclass UserUpdate(schemas.BaseUserUpdate):\n    pass\n</code></pre>"},{"location":"migration/9x_to_10x/#fastapi-users-and-routers","title":"FastAPI Users and routers","text":"<p>Pydantic schemas are now way less important in this new design. As such, you don't need to pass them when initializing the <code>FastAPIUsers</code> class:</p> BeforeAfter <pre><code>fastapi_users = FastAPIUsers(\n    get_user_manager,\n    [auth_backend],\n    User,\n    UserCreate,\n    UserUpdate,\n    UserDB,\n)\n</code></pre> <pre><code>fastapi_users = FastAPIUsers[User, uuid.UUID](\n    get_user_manager,\n    [auth_backend],\n)\n</code></pre> <p>As a consequence, those schemas need to be passed when initializing the router that needs them: <code>get_register_router</code>, <code>get_verify_router</code> and <code>get_users_router</code>.</p> BeforeAfter <pre><code>app.include_router(\n    fastapi_users.get_auth_router(auth_backend), prefix=\"/auth/jwt\", tags=[\"auth\"]\n)\napp.include_router(fastapi_users.get_register_router(), prefix=\"/auth\", tags=[\"auth\"])\napp.include_router(\n    fastapi_users.get_reset_password_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_verify_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(fastapi_users.get_users_router(), prefix=\"/users\", tags=[\"users\"])\n</code></pre> <pre><code>app.include_router(\n    fastapi_users.get_auth_router(auth_backend), prefix=\"/auth/jwt\", tags=[\"auth\"]\n)\napp.include_router(\n    fastapi_users.get_register_router(UserRead, UserCreate),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_reset_password_router(),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_verify_router(UserRead),\n    prefix=\"/auth\",\n    tags=[\"auth\"],\n)\napp.include_router(\n    fastapi_users.get_users_router(UserRead, UserUpdate),\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n</code></pre>"},{"location":"migration/9x_to_10x/#lost","title":"Lost?","text":"<p>If you're unsure or a bit lost, make sure to check the full working examples.</p>"},{"location":"usage/current-user/","title":"Get current user","text":"<p>FastAPI Users provides a dependency callable to easily inject authenticated user in your routes. They are available from your <code>FastAPIUsers</code> instance.</p> <p>Tip</p> <p>For more information about how to make an authenticated request to your API, check the documentation of your Authentication method.</p>"},{"location":"usage/current-user/#current_user","title":"<code>current_user</code>","text":"<p>Return a dependency callable to retrieve currently authenticated user, passing the following parameters:</p> <ul> <li><code>optional</code>: If <code>True</code>, <code>None</code> is returned if there is no authenticated user or if it doesn't pass the other requirements. Otherwise, throw <code>401 Unauthorized</code>. Defaults to <code>False</code>.</li> <li><code>active</code>: If <code>True</code>, throw <code>401 Unauthorized</code> if the authenticated user is inactive. Defaults to <code>False</code>.</li> <li><code>verified</code>: If <code>True</code>, throw <code>403 Forbidden</code> if the authenticated user is not verified. Defaults to <code>False</code>.</li> <li><code>superuser</code>: If <code>True</code>, throw <code>403 Forbidden</code> if the authenticated user is not a superuser. Defaults to <code>False</code>.</li> <li><code>get_enabled_backends</code>: Optional dependency callable returning a list of enabled authentication backends. Useful if you want to dynamically enable some authentication backends based on external logic, like a configuration in database. By default, all specified authentication backends are enabled. Please not however that every backends will appear in the OpenAPI documentation, as FastAPI resolves it statically.</li> </ul> <p>Create it once and reuse it</p> <p>This function is a factory, a function returning another function \ud83e\udd2f</p> <p>It's this returned function that will be the dependency called by FastAPI in your API routes.</p> <p>To avoid having to generate it on each route and avoid issues when unit testing, it's strongly recommended that you assign the result in a variable and reuse it at will in your routes. The examples below demonstrate this pattern.</p>"},{"location":"usage/current-user/#examples","title":"Examples","text":""},{"location":"usage/current-user/#get-the-current-user-active-or-not","title":"Get the current user (active or not)","text":"<pre><code>current_user = fastapi_users.current_user()\n\n@app.get(\"/protected-route\")\ndef protected_route(user: User = Depends(current_user)):\n    return f\"Hello, {user.email}\"\n</code></pre>"},{"location":"usage/current-user/#get-the-current-active-user","title":"Get the current active user","text":"<pre><code>current_active_user = fastapi_users.current_user(active=True)\n\n@app.get(\"/protected-route\")\ndef protected_route(user: User = Depends(current_active_user)):\n    return f\"Hello, {user.email}\"\n</code></pre>"},{"location":"usage/current-user/#get-the-current-active-and-verified-user","title":"Get the current active and verified user","text":"<pre><code>current_active_verified_user = fastapi_users.current_user(active=True, verified=True)\n\n@app.get(\"/protected-route\")\ndef protected_route(user: User = Depends(current_active_verified_user)):\n    return f\"Hello, {user.email}\"\n</code></pre>"},{"location":"usage/current-user/#get-the-current-active-superuser","title":"Get the current active superuser","text":"<pre><code>current_superuser = fastapi_users.current_user(active=True, superuser=True)\n\n@app.get(\"/protected-route\")\ndef protected_route(user: User = Depends(current_superuser)):\n    return f\"Hello, {user.email}\"\n</code></pre>"},{"location":"usage/current-user/#dynamically-enable-authentication-backends","title":"Dynamically enable authentication backends","text":"<p>Warning</p> <p>This is an advanced feature for cases where you have several authentication backends that are enabled conditionally. In most cases, you won't need this option.</p> <pre><code>from fastapi import Request\nfrom fastapi_users.authentication import AuthenticationBackend, BearerTransport, CookieTransport, JWTStrategy\n\nSECRET = \"SECRET\"\n\nbearer_transport = BearerTransport(tokenUrl=\"auth/jwt/login\")\ncookie_transport = CookieTransport(cookie_max_age=3600)\n\ndef get_jwt_strategy() -&gt; JWTStrategy:\n    return JWTStrategy(secret=SECRET, lifetime_seconds=3600)\n\njwt_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=bearer_transport,\n    get_strategy=get_jwt_strategy,\n)\ncookie_backend = AuthenticationBackend(\n    name=\"jwt\",\n    transport=cookie_transport,\n    get_strategy=get_jwt_strategy,\n)\n\nasync def get_enabled_backends(request: Request):\n    \"\"\"Return the enabled dependencies following custom logic.\"\"\"\n    if request.url.path == \"/protected-route-only-jwt\":\n        return [jwt_backend]\n    else:\n        return [cookie_backend, jwt_backend]\n\n\ncurrent_active_user = fastapi_users.current_user(active=True, get_enabled_backends=get_enabled_backends)\n\n\n@app.get(\"/protected-route\")\ndef protected_route(user: User = Depends(current_active_user)):\n    return f\"Hello, {user.email}. You are authenticated with a cookie or a JWT.\"\n\n\n@app.get(\"/protected-route-only-jwt\")\ndef protected_route(user: User = Depends(current_active_user)):\n    return f\"Hello, {user.email}. You are authenticated with a JWT.\"\n</code></pre>"},{"location":"usage/current-user/#in-a-path-operation","title":"In a path operation","text":"<p>If you don't need the user in the route logic, you can use this syntax:</p> <pre><code>@app.get(\"/protected-route\", dependencies=[Depends(current_superuser)])\ndef protected_route():\n    return \"Hello, some user.\"\n</code></pre> <p>You can read more about this in FastAPI docs.</p>"},{"location":"usage/flow/","title":"Flow","text":"<p>This page will present you a complete registration and authentication flow once you've setup FastAPI Users. Each example will be presented with a <code>cURL</code> and an <code>axios</code> example.</p>"},{"location":"usage/flow/#1-registration","title":"1. Registration","text":"<p>First step, of course, is to register as a user.</p>"},{"location":"usage/flow/#request","title":"Request","text":"cURLaxios <pre><code>curl \\\n-H \"Content-Type: application/json\" \\\n-X POST \\\n-d \"{\\\"email\\\": \\\"king.arthur@camelot.bt\\\",\\\"password\\\": \\\"guinevere\\\"}\" \\\nhttp://localhost:8000/auth/register\n</code></pre> <pre><code>axios.post('http://localhost:8000/auth/register', {\n    email: 'king.arthur@camelot.bt',\n    password: 'guinevere',\n})\n.then((response) =&gt; console.log(response))\n.catch((error) =&gt; console.log(error));\n</code></pre>"},{"location":"usage/flow/#response","title":"Response","text":"<p>You'll get a JSON response looking like this:</p> <pre><code>{\n    \"id\": \"4fd3477b-eccf-4ee3-8f7d-68ad72261476\",\n    \"email\": \"king.arthur@camelot.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false\n}\n</code></pre> <p>Info</p> <p>Several things to bear in mind:</p> <ul> <li>If you have defined other required fields in your <code>User</code> model (like a first name or a birthdate), you'll have to provide them in the payload.</li> <li>The user is active by default.</li> <li>The user cannot set <code>is_active</code> or <code>is_superuser</code> itself at registration. Only a superuser can do it by PATCHing the user.</li> </ul>"},{"location":"usage/flow/#2-login","title":"2. Login","text":"<p>Now, you can login as this new user.</p> <p>You can generate a login route for each authentication backend. Each backend will have a different response.</p>"},{"location":"usage/flow/#bearer-jwt","title":"Bearer + JWT","text":""},{"location":"usage/flow/#request_1","title":"Request","text":"cURLaxios <pre><code>curl \\\n-H \"Content-Type: multipart/form-data\" \\\n-X POST \\\n-F \"username=king.arthur@camelot.bt\" \\\n-F \"password=guinevere\" \\\nhttp://localhost:8000/auth/jwt/login\n</code></pre> <pre><code>const formData = new FormData();\nformData.set('username', 'king.arthur@camelot.bt');\nformData.set('password', 'guinevere');\naxios.post(\n    'http://localhost:8000/auth/jwt/login',\n    formData,\n    {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n    },\n)\n.then((response) =&gt; console.log(response))\n.catch((error) =&gt; console.log(error));\n</code></pre> <p>Warning</p> <p>Notice that we don't send it as a JSON payload here but with form data instead. Also, the email is provided by a field named <code>username</code>.</p>"},{"location":"usage/flow/#response_1","title":"Response","text":"<p>You'll get a JSON response looking like this:</p> <pre><code>{\n    \"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNGZkMzQ3N2ItZWNjZi00ZWUzLThmN2QtNjhhZDcyMjYxNDc2IiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTg3ODE4NDI5fQ.anO3JR8-WYCozZ4_2-PQ2Ov9O38RaLP2RAzQIiZhteM\",\n    \"token_type\": \"bearer\"\n}\n</code></pre> <p>You can use this token to make authenticated requests as the user <code>king.arthur@camelot.bt</code>. We'll see how in the next section.</p>"},{"location":"usage/flow/#cookie-jwt","title":"Cookie + JWT","text":""},{"location":"usage/flow/#request_2","title":"Request","text":"cURLaxios <pre><code>curl \\\n-v \\\n-H \"Content-Type: multipart/form-data\" \\\n-X POST \\\n-F \"username=king.arthur@camelot.bt\" \\\n-F \"password=guinevere\" \\\nhttp://localhost:8000/auth/cookie/login\n</code></pre> <pre><code>const formData = new FormData();\nformData.set('username', 'king.arthur@camelot.bt');\nformData.set('password', 'guinevere');\naxios.post(\n    'http://localhost:8000/auth/cookie/login',\n    formData,\n    {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n    },\n)\n.then((response) =&gt; console.log(response))\n.catch((error) =&gt; console.log(error));\n</code></pre> <p>Warning</p> <p>Notice that we don't send it as a JSON payload here but with form data instead. Also, the email is provided by a field named <code>username</code>.</p>"},{"location":"usage/flow/#response_2","title":"Response","text":"<p>You'll get an empty response. However, the response will come with a <code>Set-Cookie</code> header (that's why we added the <code>-v</code> option in <code>cURL</code> to see them).</p> <pre><code>set-cookie: fastapiusersauth=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiYzYwNjBmMTEtNTM0OS00YTI0LThiNGEtYTJhODc1ZGM1Mzk1IiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTg3ODE4OTQ3fQ.qNA4oPVYhoqrJIk-zvAyEfEVoEnP156G30H_SWEU0sU; HttpOnly; Max-Age=3600; Path=/; Secure\n</code></pre> <p>You can make authenticated requests as the user <code>king.arthur@camelot.bt</code> by setting a <code>Cookie</code> header with this cookie.</p> <p>Tip</p> <p>The cookie backend is more suited for browsers, as they handle them automatically. This means that if you make a login request in the browser, it will automatically store the cookie and automatically send it in subsequent requests.</p>"},{"location":"usage/flow/#3-get-my-profile","title":"3. Get my profile","text":"<p>Now that we can authenticate, we can get our own profile data. Depending on your authentication backend, the method to authenticate the request will vary. We'll stick with JWT from now on.</p>"},{"location":"usage/flow/#request_3","title":"Request","text":"cURLaxios <pre><code>export TOKEN=\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNGZkMzQ3N2ItZWNjZi00ZWUzLThmN2QtNjhhZDcyMjYxNDc2IiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTg3ODE4NDI5fQ.anO3JR8-WYCozZ4_2-PQ2Ov9O38RaLP2RAzQIiZhteM\";\ncurl \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-X GET \\\nhttp://localhost:8000/users/me\n</code></pre> <pre><code>const TOKEN = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiNGZkMzQ3N2ItZWNjZi00ZWUzLThmN2QtNjhhZDcyMjYxNDc2IiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTg3ODE4NDI5fQ.anO3JR8-WYCozZ4_2-PQ2Ov9O38RaLP2RAzQIiZhteM';\naxios.get(\n    'http://localhost:8000/users/me', {\n    headers: {\n        'Authorization': `Bearer ${TOKEN}`,\n    },\n})\n.then((response) =&gt; console.log(response))\n.catch((error) =&gt; console.log(error));\n</code></pre>"},{"location":"usage/flow/#response_3","title":"Response","text":"<p>You'll get a JSON response looking like this:</p> <pre><code>{\n    \"id\": \"4fd3477b-eccf-4ee3-8f7d-68ad72261476\",\n    \"email\": \"king.arthur@camelot.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false\n}\n</code></pre> <p>Tip</p> <p>If you use one of the dependency callable to protect one of your own endpoint, you'll have to authenticate exactly in the same way.</p>"},{"location":"usage/flow/#4-update-my-profile","title":"4. Update my profile","text":"<p>We can also update our own profile. For example, we can change our password like this.</p>"},{"location":"usage/flow/#request_4","title":"Request","text":"cURLaxios <pre><code>curl \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-X PATCH \\\n-d \"{\\\"password\\\": \\\"lancelot\\\"}\" \\\nhttp://localhost:8000/users/me\n</code></pre> <pre><code>axios.patch(\n    'http://localhost:8000/users/me',\n    {\n        password: 'lancelot',\n    },\n    {\n        headers: {\n            'Authorization': `Bearer ${TOKEN}`,\n        },\n    },\n)\n.then((response) =&gt; console.log(response))\n.catch((error) =&gt; console.log(error));\n</code></pre>"},{"location":"usage/flow/#response_4","title":"Response","text":"<p>You'll get a JSON response looking like this:</p> <pre><code>{\n    \"id\": \"4fd3477b-eccf-4ee3-8f7d-68ad72261476\",\n    \"email\": \"king.arthur@camelot.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false\n}\n</code></pre> <p>Info</p> <p>Once again, the user cannot set <code>is_active</code> or <code>is_superuser</code> itself. Only a superuser can do it by PATCHing the user.</p>"},{"location":"usage/flow/#5-become-a-superuser","title":"5. Become a superuser \ud83e\uddb8\ud83c\udffb\u200d\u2642\ufe0f","text":"<p>If you want to manage the users of your application, you'll have to become a superuser.</p> <p>The very first superuser can only be set at database level: open it through a CLI or a GUI, find your user and set the <code>is_superuser</code> column/property to <code>true</code>.</p>"},{"location":"usage/flow/#51-get-the-profile-of-any-user","title":"5.1. Get the profile of any user","text":"<p>Now that you are a superuser, you can leverage the power of superuser routes. You can for example get the profile of any user in the database given its id.</p>"},{"location":"usage/flow/#request_5","title":"Request","text":"cURLaxios <pre><code>curl \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-X GET \\\nhttp://localhost:8000/users/4fd3477b-eccf-4ee3-8f7d-68ad72261476\n</code></pre> <pre><code>axios.get(\n    'http://localhost:8000/users/4fd3477b-eccf-4ee3-8f7d-68ad72261476', {\n    headers: {\n        'Authorization': `Bearer ${TOKEN}`,\n    },\n})\n.then((response) =&gt; console.log(response))\n.catch((error) =&gt; console.log(error));\n</code></pre>"},{"location":"usage/flow/#response_5","title":"Response","text":"<p>You'll get a JSON response looking like this:</p> <pre><code>{\n    \"id\": \"4fd3477b-eccf-4ee3-8f7d-68ad72261476\",\n    \"email\": \"king.arthur@camelot.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false\n}\n</code></pre>"},{"location":"usage/flow/#51-update-any-user","title":"5.1. Update any user","text":"<p>We can now update the profile of any user. For example, we can promote it as superuser.</p>"},{"location":"usage/flow/#request_6","title":"Request","text":"cURLaxios <pre><code>curl \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-X PATCH \\\n -d \"{\\\"is_superuser\\\": true}\" \\\nhttp://localhost:8000/users/4fd3477b-eccf-4ee3-8f7d-68ad72261476\n</code></pre> <pre><code>axios.patch(\n    'http://localhost:8000/users/4fd3477b-eccf-4ee3-8f7d-68ad72261476',\n    {\n        is_superuser: true,\n    },\n    {\n        headers: {\n            'Authorization': `Bearer ${TOKEN}`,\n        },\n    },\n)\n.then((response) =&gt; console.log(response))\n.catch((error) =&gt; console.log(error));\n</code></pre>"},{"location":"usage/flow/#response_6","title":"Response","text":"<p>You'll get a JSON response looking like this:</p> <pre><code>{\n    \"id\": \"4fd3477b-eccf-4ee3-8f7d-68ad72261476\",\n    \"email\": \"king.arthur@camelot.bt\",\n    \"is_active\": true,\n    \"is_superuser\": true\n}\n</code></pre>"},{"location":"usage/flow/#52-delete-any-user","title":"5.2. Delete any user","text":"<p>Finally, we can delete a user.</p>"},{"location":"usage/flow/#request_7","title":"Request","text":"cURLaxios <pre><code>curl \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $TOKEN\" \\\n-X DELETE \\\nhttp://localhost:8000/users/4fd3477b-eccf-4ee3-8f7d-68ad72261476\n</code></pre> <pre><code>axios.delete(\n    'http://localhost:8000/users/4fd3477b-eccf-4ee3-8f7d-68ad72261476',\n    {\n        headers: {\n            'Authorization': `Bearer ${TOKEN}`,\n        },\n    },\n)\n.then((response) =&gt; console.log(response))\n.catch((error) =&gt; console.log(error));\n</code></pre>"},{"location":"usage/flow/#response_7","title":"Response","text":"<p>You'll get an empty response.</p>"},{"location":"usage/flow/#6-logout","title":"6. Logout","text":"<p>We can also end the session.</p>"},{"location":"usage/flow/#request_8","title":"Request","text":"cURLaxios <pre><code>curl \\\n-H \"Content-Type: application/json\" \\\n-H \"Cookie: fastapiusersauth=$TOKEN\" \\\n-X POST \\\nhttp://localhost:8000/auth/cookie/logout\n</code></pre> <pre><code>axios.post('http://localhost:8000/auth/cookie/logout',\n    null,\n    {\n        headers: {\n            'Cookie': `fastapiusersauth=${TOKEN}`,\n        },\n    }\n)\n.then((response) =&gt; console.log(response))\n.catch((error) =&gt; console.log(error));\n</code></pre>"},{"location":"usage/flow/#response_8","title":"Response","text":"<p>You'll get an empty response.</p>"},{"location":"usage/flow/#conclusion","title":"Conclusion","text":"<p>That's it! You now have a good overview of how you can manage the users through the API. Be sure to check the Routes page to have all the details about each endpoints.</p>"},{"location":"usage/routes/","title":"Routes","text":"<p>You'll find here the routes exposed by FastAPI Users. Note that you can also review them through the interactive API docs.</p>"},{"location":"usage/routes/#auth-router","title":"Auth router","text":"<p>Each authentication backend you generate a router for will produce the following routes. Take care about the prefix you gave it, especially if you have several backends.</p>"},{"location":"usage/routes/#post-login","title":"<code>POST /login</code>","text":"<p>Login a user against the method named <code>name</code>. Check the corresponding authentication method to view the success response.</p> <p>Payload (<code>application/x-www-form-urlencoded</code>)</p> <pre><code>username=king.arthur@camelot.bt&amp;password=guinevere\n</code></pre> <p><code>422 Validation Error</code></p> <p><code>400 Bad Request</code></p> <p>Bad credentials or the user is inactive.</p> <pre><code>{\n    \"detail\": \"LOGIN_BAD_CREDENTIALS\"\n}\n</code></pre> <p><code>400 Bad Request</code></p> <p>The user is not verified.</p> <pre><code>{\n    \"detail\": \"LOGIN_USER_NOT_VERIFIED\"\n}\n</code></pre>"},{"location":"usage/routes/#post-logout","title":"<code>POST /logout</code>","text":"<p>Logout the authenticated user against the method named <code>name</code>. Check the corresponding authentication method to view the success response.</p> <p><code>401 Unauthorized</code></p> <p>Missing token or inactive user.</p> <p><code>204 No content</code></p> <p>The logout process was successful.</p>"},{"location":"usage/routes/#register-router","title":"Register router","text":""},{"location":"usage/routes/#post-register","title":"<code>POST /register</code>","text":"<p>Register a new user. Will call the <code>on_after_register</code> handler on successful registration.</p> <p>Payload</p> <pre><code>{\n    \"email\": \"king.arthur@camelot.bt\",\n    \"password\": \"guinevere\"\n}\n</code></pre> <p><code>201 Created</code></p> <pre><code>{\n    \"id\": \"57cbb51a-ab71-4009-8802-3f54b4f2e23\",\n    \"email\": \"king.arthur@camelot.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false\n}\n</code></pre> <p><code>422 Validation Error</code></p> <p><code>400 Bad Request</code></p> <p>A user already exists with this email.</p> <pre><code>{\n    \"detail\": \"REGISTER_USER_ALREADY_EXISTS\"\n}\n</code></pre> <p><code>400 Bad Request</code></p> <p>Password validation failed.</p> <pre><code>{\n    \"detail\": {\n        \"code\": \"REGISTER_INVALID_PASSWORD\",\n        \"reason\": \"Password should be at least 3 characters\"\n    }\n}\n</code></pre>"},{"location":"usage/routes/#reset-password-router","title":"Reset password router","text":""},{"location":"usage/routes/#post-forgot-password","title":"<code>POST /forgot-password</code>","text":"<p>Request a reset password procedure. Will generate a temporary token and call the <code>on_after_forgot_password</code> handler if the user exists.</p> <p>To prevent malicious users from guessing existing users in your database, the route will always return a <code>202 Accepted</code> response, even if the user requested does not exist.</p> <p>Payload</p> <pre><code>{\n    \"email\": \"king.arthur@camelot.bt\"\n}\n</code></pre> <p><code>202 Accepted</code></p>"},{"location":"usage/routes/#post-reset-password","title":"<code>POST /reset-password</code>","text":"<p>Reset a password. Requires the token generated by the <code>/forgot-password</code> route.</p> <p>Payload</p> <pre><code>{\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI\",\n    \"password\": \"merlin\"\n}\n</code></pre> <p><code>200 OK</code></p> <p><code>422 Validation Error</code></p> <p><code>400 Bad Request</code></p> <p>Bad or expired token.</p> <pre><code>{\n    \"detail\": \"RESET_PASSWORD_BAD_TOKEN\"\n}\n</code></pre> <p><code>400 Bad Request</code></p> <p>Password validation failed.</p> <pre><code>{\n    \"detail\": {\n        \"code\": \"RESET_PASSWORD_INVALID_PASSWORD\",\n        \"reason\": \"Password should be at least 3 characters\"\n    }\n}\n</code></pre>"},{"location":"usage/routes/#verify-router","title":"Verify router","text":""},{"location":"usage/routes/#post-request-verify-token","title":"<code>POST /request-verify-token</code>","text":"<p>Request a user to verify their e-mail. Will generate a temporary token and call the <code>on_after_request_verify</code> handler if the user exists, active and not already verified.</p> <p>To prevent malicious users from guessing existing users in your database, the route will always return a <code>202 Accepted</code> response, even if the user requested does not exist, not active or already verified.</p> <p>Payload</p> <pre><code>{\n    \"email\": \"king.arthur@camelot.bt\"\n}\n</code></pre> <p><code>202 Accepted</code></p>"},{"location":"usage/routes/#post-verify","title":"<code>POST /verify</code>","text":"<p>Verify a user. Requires the token generated by the <code>/request-verify-token</code> route. Will call the <code>on_after_verify</code> handler on success.</p> <p>Payload</p> <pre><code>{\n    \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI\"\n}\n</code></pre> <p><code>200 OK</code></p> <p><code>422 Validation Error</code></p> <p><code>400 Bad Request</code></p> <p>Bad token, not existing user or not the e-mail currently set for the user.</p> <pre><code>{\n    \"detail\": \"VERIFY_USER_BAD_TOKEN\"\n}\n</code></pre> <p><code>400 Bad Request</code></p> <p>The user is already verified.</p> <pre><code>{\n    \"detail\": \"VERIFY_USER_ALREADY_VERIFIED\"\n}\n</code></pre>"},{"location":"usage/routes/#oauth-router","title":"OAuth router","text":"<p>Each OAuth router you define will expose the two following routes.</p>"},{"location":"usage/routes/#get-authorize","title":"<code>GET /authorize</code>","text":"<p>Return the authorization URL for the OAuth service where you should redirect your user.</p> <p>Query parameters</p> <ul> <li><code>scopes</code>: Optional list of scopes to ask for. Expected format: <code>scopes=a&amp;scopes=b</code>.</li> </ul> <p><code>200 OK</code></p> <pre><code>{\n    \"authorization_url\": \"https://www.tintagel.bt/oauth/authorize?client_id=CLIENT_ID&amp;scopes=a+b&amp;redirect_uri=https://www.camelot.bt/oauth/callback\"\n}\n</code></pre>"},{"location":"usage/routes/#get-callback","title":"<code>GET /callback</code>","text":"<p>Handle the OAuth callback.</p> <p>Query parameters</p> <ul> <li><code>code</code>: OAuth callback code.</li> <li><code>state</code>: State token.</li> <li><code>error</code>: OAuth error.</li> </ul> <p>Depending on the situation, several things can happen:</p> <ul> <li>The OAuth account exists in database and is linked to a user:<ul> <li>OAuth account is updated in database with fresh access token.</li> <li>The user is authenticated following the chosen authentication method.</li> </ul> </li> <li>The OAuth account doesn't exist in database but a user with the same email address exists:<ul> <li>By default, an HTTP 400 error is raised.</li> <li>If the <code>associate_by_email</code> flag is set to <code>True</code> on the router declaration, OAuth account is linked to the user. The user is authenticated following the chosen authentication method.</li> </ul> </li> <li>The OAuth account doesn't exist in database and no user with the email address exists:<ul> <li>A new user is created and linked to the OAuth account.</li> <li>The user is authenticated following the chosen authentication method.</li> </ul> </li> </ul> <p><code>400 Bad Request</code></p> <p>Invalid token.</p> <p><code>400 Bad Request</code></p> <p>The OAuth provider didn't return an e-mail address. Make sure this provider return e-mail address through their API and you have asked for the required scope.</p> <pre><code>{\n    \"detail\": \"OAUTH_NOT_AVAILABLE_EMAIL\"\n}\n</code></pre> <p><code>400 Bad Request</code></p> <p>Another user with the same e-mail address already exists.</p> <pre><code>{\n    \"detail\": \"OAUTH_USER_ALREADY_EXISTS\"\n}\n</code></pre> <p><code>400 Bad Request</code></p> <p>User is inactive.</p> <pre><code>{\n    \"detail\": \"LOGIN_BAD_CREDENTIALS\"\n}\n</code></pre>"},{"location":"usage/routes/#oauth-association-router","title":"OAuth association router","text":"<p>Each OAuth association router you define will expose the two following routes.</p>"},{"location":"usage/routes/#get-authorize_1","title":"<code>GET /authorize</code>","text":"<p>Return the authorization URL for the OAuth service where you should redirect your user.</p> <p>Query parameters</p> <ul> <li><code>scopes</code>: Optional list of scopes to ask for. Expected format: <code>scopes=a&amp;scopes=b</code>.</li> </ul> <p><code>401 Unauthorized</code></p> <p>Missing token or inactive user.</p> <p><code>200 OK</code></p> <pre><code>{\n    \"authorization_url\": \"https://www.tintagel.bt/oauth/authorize?client_id=CLIENT_ID&amp;scopes=a+b&amp;redirect_uri=https://www.camelot.bt/oauth/callback\"\n}\n</code></pre>"},{"location":"usage/routes/#get-callback_1","title":"<code>GET /callback</code>","text":"<p>Handle the OAuth callback and add the OAuth account to the current authenticated active user.</p> <p>Query parameters</p> <ul> <li><code>code</code>: OAuth callback code.</li> <li><code>state</code>: State token.</li> <li><code>error</code>: OAuth error.</li> </ul> <p><code>401 Unauthorized</code></p> <p>Missing token or inactive user.</p> <p><code>400 Bad Request</code></p> <p>Invalid token.</p> <p><code>400 Bad Request</code></p> <p>The OAuth provider didn't return an e-mail address. Make sure this provider return e-mail address through their API and you have asked for the required scope.</p> <pre><code>{\n    \"detail\": \"OAUTH_NOT_AVAILABLE_EMAIL\"\n}\n</code></pre> <p><code>200 OK</code></p> <pre><code>{\n    \"id\": \"57cbb51a-ab71-4009-8802-3f54b4f2e23\",\n    \"email\": \"king.arthur@tintagel.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false,\n    \"oauth_accounts\": [\n        {\n            \"id\": \"6c98caf5-9bc5-4c4f-8a45-a0ae0c40cd77\",\n            \"oauth_name\": \"TINTAGEL\",\n            \"access_token\": \"ACCESS_TOKEN\",\n            \"expires_at\": \"1641040620\",\n            \"account_id\": \"king_arthur_tintagel\",\n            \"account_email\": \"king.arthur@tintagel.bt\"\n        }\n    ]\n}\n</code></pre>"},{"location":"usage/routes/#users-router","title":"Users router","text":""},{"location":"usage/routes/#get-me","title":"<code>GET /me</code>","text":"<p>Return the current authenticated active user.</p> <p><code>200 OK</code></p> <pre><code>{\n    \"id\": \"57cbb51a-ab71-4009-8802-3f54b4f2e23\",\n    \"email\": \"king.arthur@camelot.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false\n}\n</code></pre> <p><code>401 Unauthorized</code></p> <p>Missing token or inactive user.</p>"},{"location":"usage/routes/#patch-me","title":"<code>PATCH /me</code>","text":"<p>Update the current authenticated active user.</p> <p>Payload</p> <pre><code>{\n    \"email\": \"king.arthur@tintagel.bt\",\n    \"password\": \"merlin\"\n}\n</code></pre> <p><code>200 OK</code></p> <pre><code>{\n    \"id\": \"57cbb51a-ab71-4009-8802-3f54b4f2e23\",\n    \"email\": \"king.arthur@tintagel.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false\n}\n</code></pre> <p><code>401 Unauthorized</code></p> <p>Missing token or inactive user.</p> <p><code>400 Bad Request</code></p> <p>Password validation failed.</p> <pre><code>{\n    \"detail\": {\n        \"code\": \"UPDATE_USER_INVALID_PASSWORD\",\n        \"reason\": \"Password should be at least 3 characters\"\n    }\n}\n</code></pre> <p><code>400 Bad Request</code></p> <p>A user with this email already exists. <pre><code>{\n    \"detail\": \"UPDATE_USER_EMAIL_ALREADY_EXISTS\"\n}\n</code></pre></p> <p><code>422 Validation Error</code></p>"},{"location":"usage/routes/#get-user_id","title":"<code>GET /{user_id}</code>","text":"<p>Return the user with id <code>user_id</code>.</p> <p><code>200 OK</code></p> <pre><code>{\n    \"id\": \"57cbb51a-ab71-4009-8802-3f54b4f2e23\",\n    \"email\": \"king.arthur@camelot.bt\",\n    \"is_active\": true,\n    \"is_superuser\": false\n}\n</code></pre> <p><code>401 Unauthorized</code></p> <p>Missing token or inactive user.</p> <p><code>403 Forbidden</code></p> <p>Not a superuser.</p> <p><code>404 Not found</code></p> <p>The user does not exist.</p>"},{"location":"usage/routes/#patch-user_id","title":"<code>PATCH /{user_id}</code>","text":"<p>Update the user with id <code>user_id</code>.</p> <p>Payload</p> <pre><code>{\n    \"email\": \"king.arthur@tintagel.bt\",\n    \"password\": \"merlin\",\n    \"is_active\": false,\n    \"is_superuser\": true\n}\n</code></pre> <p><code>200 OK</code></p> <pre><code>{\n    \"id\": \"57cbb51a-ab71-4009-8802-3f54b4f2e23\",\n    \"email\": \"king.arthur@camelot.bt\",\n    \"is_active\": false,\n    \"is_superuser\": true\n}\n</code></pre> <p><code>401 Unauthorized</code></p> <p>Missing token or inactive user.</p> <p><code>403 Forbidden</code></p> <p>Not a superuser.</p> <p><code>404 Not found</code></p> <p>The user does not exist.</p> <p><code>400 Bad Request</code></p> <p>Password validation failed.</p> <pre><code>{\n    \"detail\": {\n        \"code\": \"UPDATE_USER_INVALID_PASSWORD\",\n        \"reason\": \"Password should be at least 3 characters\"\n    }\n}\n</code></pre> <p><code>400 Bad Request</code></p> <p>A user with this email already exists. <pre><code>{\n    \"detail\": \"UPDATE_USER_EMAIL_ALREADY_EXISTS\"\n}\n</code></pre></p>"},{"location":"usage/routes/#delete-user_id","title":"<code>DELETE /{user_id}</code>","text":"<p>Delete the user with id <code>user_id</code>.</p> <p><code>204 No content</code></p> <p><code>401 Unauthorized</code></p> <p>Missing token or inactive user.</p> <p><code>403 Forbidden</code></p> <p>Not a superuser.</p> <p><code>404 Not found</code></p> <p>The user does not exist.</p>"}]}